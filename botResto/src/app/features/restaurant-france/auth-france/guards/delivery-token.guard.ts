import { Injectable } from '@angular/core';
import { CanActivate, Router, UrlTree, ActivatedRouteSnapshot } from '@angular/router';
import { Observable } from 'rxjs';
import { map, filter, take, timeout, catchError, switchMap } from 'rxjs/operators';
import { of } from 'rxjs';

import { AuthFranceService } from '../services/auth-france.service';
import { DeliveryTokenService } from '../../../../core/services/delivery-token.service';

@Injectable({
  providedIn: 'root'
})
export class DeliveryTokenGuard implements CanActivate {

  constructor(
    private authFranceService: AuthFranceService,
    private deliveryTokenService: DeliveryTokenService,
    private router: Router
  ) { }

  canActivate(route: ActivatedRouteSnapshot): Observable<boolean | UrlTree> {
    // R√©cup√©rer le token depuis les query params
    const token = route.queryParams['token'];
    
    // Si un token est pr√©sent, tenter l'authentification par token
    if (token) {
      console.log('üîë [DeliveryTokenGuard] Token d√©tect√©, tentative d\'authentification:', token);
      
      return this.deliveryTokenService.validateAndAuthenticateToken(token).pipe(
        map(result => {
          if (result.success && result.driver) {
            console.log('‚úÖ [DeliveryTokenGuard] Authentification par token r√©ussie');
            // Le service a d√©j√† mis √† jour l'utilisateur dans authFranceService
            return true;
          } else {
            console.log('‚ùå [DeliveryTokenGuard] Token invalide, redirection login');
            return this.router.createUrlTree(['/restaurant-france/auth-france/login-france']);
          }
        }),
        catchError(error => {
          console.error('‚ùå [DeliveryTokenGuard] Erreur validation token:', error);
          return of(this.router.createUrlTree(['/restaurant-france/auth-france/login-france']));
        })
      );
    }
    
    // Si pas de token, v√©rifier l'authentification normale
    console.log('üõ°Ô∏è [DeliveryTokenGuard] Pas de token, v√©rification auth normale');
    
    return this.authFranceService.currentUser$.pipe(
      filter(user => user !== undefined),
      take(1),
      timeout(3000),
      map(user => {
        if (user && user.type === 'driver') {
          console.log('‚úÖ [DeliveryTokenGuard] Acc√®s autoris√© - Livreur authentifi√©');
          return true;
        } else if (user && user.type === 'restaurant') {
          console.log('üè™ [DeliveryTokenGuard] Redirection restaurant');
          return this.router.createUrlTree(['/restaurant-france/dashboard-france']);
        } else {
          console.log('üö´ [DeliveryTokenGuard] Non authentifi√© - Redirection login');
          return this.router.createUrlTree(['/restaurant-france/auth-france/login-france']);
        }
      }),
      catchError(error => {
        console.error('‚ùå [DeliveryTokenGuard] Timeout ou erreur:', error);
        return of(this.router.createUrlTree(['/restaurant-france/auth-france/login-france']));
      })
    );
  }
}