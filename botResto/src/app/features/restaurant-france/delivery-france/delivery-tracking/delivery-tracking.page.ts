import { Component, OnInit, OnDestroy } from '@angular/core';
import { AlertController, ToastController, RefresherCustomEvent } from '@ionic/angular';
import { Subscription } from 'rxjs';

import { AuthFranceService, FranceUser } from '../../auth-france/services/auth-france.service';
import { DeliveryTrackingService, DeliveryTrackingData, OrderTrackingStats } from '../../../../core/services/delivery-tracking.service';

@Component({
  selector: 'app-delivery-tracking',
  templateUrl: './delivery-tracking.page.html',
  styleUrls: ['./delivery-tracking.page.scss'],
  standalone: false
})
export class DeliveryTrackingPage implements OnInit, OnDestroy {
  currentUser: FranceUser | null = null;
  trackingData: DeliveryTrackingData = {
    activeOrders: [],
    totalActiveOrders: 0,
    totalPendingNotifications: 0,
    averageResponseTime: 0
  };
  
  isLoading = false;
  isRefreshing = false;
  
  // Auto-refresh supprim√© - refresh manuel uniquement
  private userSubscription?: Subscription;

  constructor(
    private authFranceService: AuthFranceService,
    private deliveryTrackingService: DeliveryTrackingService,
    private alertController: AlertController,
    private toastController: ToastController
  ) {}

  async ngOnInit() {
    // S'abonner aux changements d'utilisateur pour g√©rer l'authentification asynchrone
    this.userSubscription = this.authFranceService.currentUser$.subscribe(user => {
      // Ignorer undefined (en cours de v√©rification)
      if (user !== undefined) {
        this.currentUser = user;
        if (user && user.type === 'restaurant') {
          console.log('‚úÖ [DeliveryTracking] Utilisateur restaurant authentifi√©');
          this.loadTrackingData();
        } else if (!user) {
          console.log('‚ùå [DeliveryTracking] Utilisateur non connect√©');
        } else {
          console.log('‚ö†Ô∏è [DeliveryTracking] Utilisateur non-restaurant d√©tect√©');
        }
      }
    });

    // Green API d√©j√† configur√© automatiquement
    // Auto-refresh supprim√© - refresh manuel uniquement via l'ic√¥ne
  }

  ngOnDestroy() {
    // Nettoyer la subscription utilisateur
    this.userSubscription?.unsubscribe();
  }

  /**
   * Charger les donn√©es de suivi
   */
  async loadTrackingData() {
    if (!this.currentUser) return;

    this.isLoading = true;

    try {
      this.trackingData = await this.deliveryTrackingService.getDeliveryTrackingData(
        this.currentUser.restaurantId
      );
      
      console.log(`üìä [DeliveryTracking] Donn√©es charg√©es: ${this.trackingData.activeOrders.length} commandes`);
      
    } catch (error) {
      console.error('‚ùå [DeliveryTracking] Erreur chargement donn√©es:', error);
      await this.showToast('Erreur lors du chargement des donn√©es', 'danger');
    } finally {
      this.isLoading = false;
    }
  }

  /**
   * Refresh manuel (pull-to-refresh)
   */
  async handleRefresh(event: RefresherCustomEvent) {
    this.isRefreshing = true;
    
    try {
      await this.loadTrackingData();
    } catch (error) {
      console.error('‚ùå [DeliveryTracking] Erreur refresh:', error);
    } finally {
      this.isRefreshing = false;
      event.target.complete();
    }
  }

  // M√©thodes d'auto-refresh supprim√©es - refresh manuel uniquement via l'ic√¥ne

  /**
   * Forcer la lib√©ration d'une commande
   */
  async forceReleaseOrder(order: OrderTrackingStats) {
    const alert = await this.alertController.create({
      header: 'üö® Force Release',
      message: `√ätes-vous s√ªr de vouloir lib√©rer la commande #${order.orderNumber} ?<br><br>‚ö†Ô∏è Cette action va :<br>‚Ä¢ Remettre la commande en recherche<br>‚Ä¢ Notifier tous les livreurs disponibles`,
      inputs: [
        {
          name: 'reason',
          type: 'textarea',
          placeholder: 'Raison de la lib√©ration (optionnel)',
          value: 'Livreur indisponible - Recherche nouveau livreur'
        }
      ],
      buttons: [
        {
          text: 'Annuler',
          role: 'cancel'
        },
        {
          text: 'Lib√©rer',
          handler: async (data) => {
            await this.performForceRelease(order.orderId, data.reason);
          }
        }
      ]
    });

    await alert.present();
  }

  /**
   * Ex√©cuter la lib√©ration forc√©e
   */
  private async performForceRelease(orderId: number, reason: string) {
    if (!this.currentUser) return;

    try {
      const result = await this.deliveryTrackingService.forceReleaseOrder(
        orderId,
        this.currentUser.restaurantId,
        reason || 'Lib√©ration forc√©e par le restaurant'
      );

      if (result.success) {
        await this.showToast(result.message, 'success');
        await this.loadTrackingData(); // Recharger les donn√©es
      } else {
        await this.showToast(result.message, 'danger');
      }

    } catch (error) {
      console.error('‚ùå [DeliveryTracking] Erreur force release:', error);
      await this.showToast('Erreur lors de la lib√©ration', 'danger');
    }
  }

  /**
   * Envoyer des rappels pour une commande
   */
  async sendReminders(order: OrderTrackingStats) {
    console.log('üîî [DeliveryTracking] Click sendReminders pour commande:', order);
    
    const alert = await this.alertController.create({
      header: 'üîî Envoi de rappels',
      message: `Envoyer des rappels WhatsApp pour la commande #${order.orderNumber} ?\n\nüì± Les livreurs d√©j√† notifi√©s recevront un nouveau message de rappel.`,
      buttons: [
        {
          text: 'Annuler',
          role: 'cancel',
          handler: () => {
            console.log('‚ùå [DeliveryTracking] Rappels annul√©s');
          }
        },
        {
          text: 'Envoyer',
          handler: () => {
            console.log('‚úÖ [DeliveryTracking] Confirmation envoi rappels');
            // Fermer imm√©diatement l'alert et traiter en arri√®re-plan
            this.performSendRemindersAsync(order.orderId);
            return true; // Ferme l'alert imm√©diatement
          }
        }
      ]
    });

    await alert.present();
    console.log('üì± [DeliveryTracking] Alert de rappels affich√©');
  }

  /**
   * Ex√©cuter l'envoi des rappels de mani√®re asynchrone (non-bloquant)
   */
  private async performSendRemindersAsync(orderId: number) {
    try {
      // Afficher imm√©diatement un toast de traitement en cours
      await this.showToast('üì§ Envoi des rappels en cours...', 'warning');
      
      console.log('üöÄ [DeliveryTracking] D√©but envoi rappels pour commande:', orderId);
      
      const result = await this.deliveryTrackingService.sendReminderNotifications(orderId);
      
      console.log('üìã [DeliveryTracking] R√©sultat envoi rappels:', result);

      if (result.success) {
        console.log('‚úÖ [DeliveryTracking] Rappels envoy√©s avec succ√®s');
        await this.showToast(result.message, 'success');
        await this.loadTrackingData(); // Recharger les donn√©es
      } else {
        console.log('‚ùå [DeliveryTracking] √âchec envoi rappels:', result.message);
        await this.showToast(result.message, 'danger');
      }

    } catch (error) {
      console.error('‚ùå [DeliveryTracking] Erreur envoi rappels:', error);
      await this.showToast('Erreur lors de l\'envoi des rappels', 'danger');
    }
  }

  /**
   * Ex√©cuter l'envoi des rappels (version synchrone - conserv√©e pour compatibilit√©)
   */
  private async performSendReminders(orderId: number) {
    try {
      console.log('üöÄ [DeliveryTracking] D√©but envoi rappels pour commande:', orderId);
      
      const result = await this.deliveryTrackingService.sendReminderNotifications(orderId);
      
      console.log('üìã [DeliveryTracking] R√©sultat envoi rappels:', result);

      if (result.success) {
        console.log('‚úÖ [DeliveryTracking] Rappels envoy√©s avec succ√®s');
        await this.showToast(result.message, 'success');
        await this.loadTrackingData(); // Recharger les donn√©es
      } else {
        console.log('‚ùå [DeliveryTracking] √âchec envoi rappels:', result.message);
        await this.showToast(result.message, 'danger');
      }

    } catch (error) {
      console.error('‚ùå [DeliveryTracking] Erreur envoi rappels:', error);
      await this.showToast('Erreur lors de l\'envoi des rappels', 'danger');
    }
  }

  /**
   * Marquer une commande comme pr√™te
   */
  async markOrderReady(order: OrderTrackingStats) {
    if (!this.currentUser) return;

    const alert = await this.alertController.create({
      header: '‚úÖ Marquer comme pr√™te',
      message: `Marquer la commande #${order.orderNumber} comme pr√™te ?<br><br>üì± Tous les livreurs disponibles seront automatiquement notifi√©s par WhatsApp.`,
      buttons: [
        {
          text: 'Annuler',
          role: 'cancel'
        },
        {
          text: 'Marquer pr√™te',
          handler: async () => {
            await this.performMarkReady(order.orderId);
          }
        }
      ]
    });

    await alert.present();
  }

  /**
   * Ex√©cuter le marquage comme pr√™te
   */
  private async performMarkReady(orderId: number) {
    if (!this.currentUser) return;

    try {
      const result = await this.deliveryTrackingService.markOrderReady(
        orderId,
        this.currentUser.restaurantId
      );

      if (result.success) {
        await this.showToast(result.message, 'success');
        await this.loadTrackingData(); // Recharger les donn√©es
      } else {
        await this.showToast(result.message, 'danger');
      }

    } catch (error) {
      console.error('‚ùå [DeliveryTracking] Erreur marquage pr√™te:', error);
      await this.showToast('Erreur lors du marquage comme pr√™te', 'danger');
    }
  }

  // Configuration Green API supprim√©e - d√©j√† g√©r√©e automatiquement

  /**
   * Obtenir l'ic√¥ne de statut pour une commande
   */
  getStatusIcon(status: string): string {
    switch (status) {
      case 'prete': return 'checkmark-circle';
      case 'assignee': return 'person-circle';
      default: return 'help-circle';
    }
  }

  /**
   * Obtenir la couleur de statut pour une commande
   */
  getStatusColor(status: string): string {
    switch (status) {
      case 'prete': return 'warning';
      case 'assignee': return 'primary';
      default: return 'medium';
    }
  }

  /**
   * Calculer le temps relatif depuis une date (d√©l√©gu√© au service)
   */
  getTimeAgo(timestamp: string | Date): string {
    return this.deliveryTrackingService.getTimeAgo(timestamp);
  }

  /**
   * Formater une date en heure 24H (d√©l√©gu√© au service)
   */
  formatTime24H(timestamp: string | Date): string {
    return this.deliveryTrackingService.formatTime24H(timestamp);
  }

  /**
   * Obtenir le texte de statut pour une commande
   */
  getStatusText(status: string): string {
    switch (status) {
      case 'prete': return 'Pr√™te';
      case 'assignee': return 'Assign√©e';
      default: return 'Inconnue';
    }
  }

  /**
   * Afficher un toast
   */
  private async showToast(message: string, color: 'success' | 'danger' | 'warning' = 'success') {
    const toast = await this.toastController.create({
      message,
      duration: 3000,
      color,
      position: 'top'
    });
    await toast.present();
  }
}