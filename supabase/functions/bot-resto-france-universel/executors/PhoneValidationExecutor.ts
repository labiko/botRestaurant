// üì± PHONE VALIDATION EXECUTOR
// SOLID - Single Responsibility: Valide uniquement les num√©ros de t√©l√©phone

import { BaseExecutor } from './BaseExecutor.ts';
import type { WorkflowStep, WorkflowContext, StepResult } from '../types.ts';

export class PhoneValidationExecutor extends BaseExecutor {
    
    /**
     * Ex√©cute la validation du num√©ro de t√©l√©phone
     * SOLID - Interface Segregation: Impl√©mente uniquement ce qui est n√©cessaire
     */
    async execute(step: WorkflowStep, context: WorkflowContext): Promise<StepResult> {
        console.log(`üì± [PhoneValidation] Validation num√©ro: ${context.userInput}`);
        
        try {
            const phoneNumber = this.normalizePhoneNumber(context.userInput);
            
            // Valider format
            if (!this.isValidPhoneFormat(phoneNumber)) {
                return {
                    success: false,
                    errors: ['Format de num√©ro invalide'],
                    nextStep: null,
                    outputData: {}
                };
            }
            
            // V√©rifier si c'est un restaurant
            const restaurant = await this.findRestaurantByPhone(phoneNumber, context);
            
            if (!restaurant) {
                return {
                    success: false,
                    errors: ['Ce num√©ro ne correspond √† aucun restaurant'],
                    nextStep: null,
                    outputData: {}
                };
            }
            
            return {
                success: true,
                errors: [],
                nextStep: 'load_restaurant_menu',
                outputData: {
                    restaurantId: restaurant.id,
                    restaurantName: restaurant.name,
                    normalizedPhone: phoneNumber
                }
            };
            
        } catch (error) {
            console.error('‚ùå [PhoneValidation] Erreur:', error);
            return {
                success: false,
                errors: ['Erreur validation num√©ro'],
                nextStep: null,
                outputData: {}
            };
        }
    }
    
    /**
     * Normalise le num√©ro de t√©l√©phone
     * SOLID - DRY: R√©utilisable pour tous les formats
     */
    private normalizePhoneNumber(input: string): string {
        // Supprimer espaces, tirets, parenth√®ses
        let normalized = input.replace(/[\s\-\(\)]/g, '');
        
        // G√©rer le +33
        if (normalized.startsWith('+33')) {
            normalized = normalized.substring(3);
        }
        
        // G√©rer le 0033
        if (normalized.startsWith('0033')) {
            normalized = normalized.substring(4);
        }
        
        // Ajouter le 0 si manquant pour num√©ro fran√ßais
        if (normalized.length === 9 && !normalized.startsWith('0')) {
            normalized = '0' + normalized;
        }
        
        return normalized;
    }
    
    /**
     * Valide le format du num√©ro
     */
    private isValidPhoneFormat(phone: string): boolean {
        // Format fran√ßais: 10 chiffres commen√ßant par 0
        const frenchPattern = /^0[1-9][0-9]{8}$/;
        
        // Format international sans +33
        const internationalPattern = /^[1-9][0-9]{8,14}$/;
        
        return frenchPattern.test(phone) || internationalPattern.test(phone);
    }
    
    /**
     * Recherche le restaurant par num√©ro de t√©l√©phone
     */
    private async findRestaurantByPhone(
        phone: string, 
        context: WorkflowContext
    ): Promise<any> {
        // Utiliser le service de requ√™te via le contexte
        const queryService = context.services?.productQueryService;
        
        if (!queryService) {
            throw new Error('Service de requ√™te non disponible');
        }
        
        // Chercher dans la base
        const { data, error } = await context.services.supabase
            .from('france_restaurants')
            .select('*')
            .or(`phone.eq.${phone},whatsapp_number.eq.${phone},contact_phone.eq.${phone}`)
            .single();
        
        return data;
    }
    
    /**
     * Obtenir la configuration de l'executor
     */
    getConfig(): Record<string, any> {
        return {
            validateFormat: true,
            checkRestaurant: true,
            allowInternational: true,
            maxRetries: 3
        };
    }
}