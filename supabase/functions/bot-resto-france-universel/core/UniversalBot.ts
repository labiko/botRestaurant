// ü§ñ BOT UNIVERSEL - ORCHESTRATEUR PRINCIPAL
// Architecture SOLID : Single Responsibility + Dependency Injection

// ‚è±Ô∏è Configuration dur√©e de session
const SESSION_DURATION_MINUTES = 120; // 2 heures - Dur√©e raisonnable pour commandes livraison

import { 
  IMessageHandler, 
  ISessionManager, 
  IRestaurantConfigManager, 
  IWorkflowExecutor,
  IMessageSender,
  BotSession,
  RestaurantConfig,
  WorkflowDefinition,
  ApiResponse 
} from '../types.ts';

import { CompositeWorkflowExecutor } from '../services/CompositeWorkflowExecutor.ts';
import { OrderService } from '../services/OrderService.ts';
import { PerformanceLogger } from '../services/PerformanceLogger.ts';
import { DeliveryRadiusService } from '../services/DeliveryRadiusService.ts';
import { AddressManagementService } from '../services/AddressManagementService.ts';
import { GooglePlacesService } from '../services/GooglePlacesService.ts';
import { WhatsAppContactService } from '../services/WhatsAppContactService.ts';
import { CancellationService } from '../services/CancellationService.ts';
import { RestaurantScheduleService } from '../services/RestaurantScheduleService.ts';
import { TimezoneService, RestaurantContext } from '../services/TimezoneService.ts';
import { DeliveryModesService, ServiceMode } from '../services/DeliveryModesService.ts';
import { PizzaDisplayService } from '../services/PizzaDisplayService.ts';
import { RestaurantDiscoveryService } from '../services/RestaurantDiscoveryService.ts';
import { LocationService, ICoordinates } from '../../_shared/application/services/LocationService.ts';

/**
 * Orchestrateur principal du bot universel
 * SOLID - Single Responsibility : Coordonne les services, ne fait pas le travail
 */
export class UniversalBot implements IMessageHandler {

  /**
   * Obtenir l'heure actuelle dans le bon fuseau horaire du restaurant
   * ‚úÖ Version finale avec support multi-timezone
   */
  private getCurrentTime(): Date {
    // Utiliser le contexte restaurant si disponible
    if (this.currentRestaurantContext) {
      return this.currentRestaurantContext.getCurrentTime();
    }

    // Fallback sur Europe/Paris si pas de contexte
    const timezone = 'Europe/Paris';
    const formatter = new Intl.DateTimeFormat('fr-FR', {
      timeZone: timezone,
      year: 'numeric',
      month: '2-digit',
      day: '2-digit',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit',
      hour12: false
    });

    const utcNow = new Date();
    const formatted = formatter.format(utcNow);

    // Parsing du format DD/MM/YYYY HH:mm:ss
    const parts = formatted.match(/(\d{2})\/(\d{2})\/(\d{4})\s+(\d{2}):(\d{2}):(\d{2})/);
    if (parts) {
      const [, day, month, year, hour, minute, second] = parts;
      return new Date(
        parseInt(year),
        parseInt(month) - 1,
        parseInt(day),
        parseInt(hour),
        parseInt(minute),
        parseInt(second)
      );
    }

    // Fallback UTC si parsing √©choue
    return utcNow;
  }
  private compositeWorkflowExecutor: CompositeWorkflowExecutor;
  private orderService: OrderService;
  private addressService: AddressManagementService;
  private googlePlacesService: GooglePlacesService;
  private whatsappContactService: WhatsAppContactService;
  private cancellationService: CancellationService;
  private timezoneService: TimezoneService;
  private deliveryModesService: DeliveryModesService;
  private deliveryRadiusService: DeliveryRadiusService;
  private pizzaDisplayService: PizzaDisplayService;
  private restaurantDiscoveryService: RestaurantDiscoveryService;
  private currentRestaurantContext: RestaurantContext | null = null;
  private restaurantConfig: RestaurantConfig | null = null;
  private supabaseUrl: string;
  private supabaseKey: string;

  // üîß OPTIMISATION: Client Supabase unique r√©utilis√©
  private supabaseClient: any = null;
  
  constructor(
    private sessionManager: ISessionManager,
    private configManager: IRestaurantConfigManager,
    private workflowExecutor: IWorkflowExecutor,
    private messageSender: IMessageSender,
    private scheduleService: RestaurantScheduleService
  ) {
    this.supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    this.supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    
    // Initialiser le service de timezone
    this.timezoneService = new TimezoneService();
    
    // Configurer SessionManager pour utiliser la m√™me instance TimezoneService
    if (this.sessionManager && typeof this.sessionManager.setTimezoneService === 'function') {
      this.sessionManager.setTimezoneService(this.timezoneService);
    }
    
    // Initialiser le service de modes de livraison
    this.deliveryModesService = new DeliveryModesService(this.supabaseUrl, this.supabaseKey);
    
    // Initialiser le service de validation du rayon de livraison
    this.deliveryRadiusService = new DeliveryRadiusService(this.supabaseUrl, this.supabaseKey);
    
    // Initialiser le service d'affichage unifi√© des pizzas
    this.pizzaDisplayService = new PizzaDisplayService(
      messageSender,
      this.supabaseUrl,
      this.supabaseKey
    );
    
    // Initialiser le service de workflow composite
    this.compositeWorkflowExecutor = new CompositeWorkflowExecutor(
      messageSender,
      this.supabaseUrl,
      this.supabaseKey
    );
    
    // Initialiser le service WhatsApp Contact
    const greenApiUrl = Deno.env.get('GREEN_API_URL') || 'https://api.green-api.com';
    const instanceId = Deno.env.get('GREEN_API_INSTANCE_ID')!;
    const apiToken = Deno.env.get('GREEN_API_TOKEN')!;
    this.whatsappContactService = new WhatsAppContactService(greenApiUrl, instanceId, apiToken);
    
    // Initialiser les services de commande et adresse
    this.orderService = new OrderService(
      this.supabaseUrl,
      this.supabaseKey,
      this.getCurrentTime.bind(this)
    );
    this.addressService = new AddressManagementService(
      this.supabaseUrl,
      this.supabaseKey,
      this.whatsappContactService
    );
    this.googlePlacesService = new GooglePlacesService();

    // Initialiser le service d'annulation
    this.cancellationService = new CancellationService(
      this.supabaseUrl,
      this.supabaseKey,
      this.messageSender as any, // WhatsAppNotificationFranceService compatible
      this.getCurrentTime.bind(this)
    );
    
    // Initialiser le service de d√©couverte des restaurants
    this.restaurantDiscoveryService = new RestaurantDiscoveryService(
      this.supabaseUrl,
      this.supabaseKey
    );
  }

  /**
   * üí∞ Formate un prix selon la devise du restaurant configur√© avec s√©parateurs
   */
  private formatPrice(amount: number): string {
    console.log(`üí∞ [FormatPrice] Montant: ${amount}, Config: ${this.restaurantConfig?.currency || 'undefined'}`);

    if (!this.restaurantConfig?.currency) return `${amount}‚Ç¨`;

    switch (this.restaurantConfig.currency) {
      case 'EUR':
        return `${amount}‚Ç¨`;
      case 'GNF':
        return `${amount.toLocaleString('fr-FR')} GNF`;
      case 'XOF':
        return `${amount.toLocaleString('fr-FR')} FCFA`;
      default:
        return `${amount}‚Ç¨`;
    }
  }

  /**
   * üí∞ R√©cup√®re le symbole de devise du restaurant configur√© (pour compatibilit√©)
   */
  private getCurrencySymbol(): string {
    if (!this.restaurantConfig?.currency) return '‚Ç¨';

    switch (this.restaurantConfig.currency) {
      case 'EUR': return '‚Ç¨';
      case 'GNF': return ' GNF';
      case 'XOF': return ' FCFA';
      default: return '‚Ç¨';
    }
  }

  /**
   * üîß OPTIMISATION: M√©thode pour obtenir le client Supabase unique
   * √âvite la cr√©ation de multiples clients et imports r√©p√©t√©s
   */
  private async getSupabaseClient() {
    try {
      if (!this.supabaseClient) {
        console.log('üîß [UniversalBot] Cr√©ation client Supabase unique...');
        const { createClient } = await import('https://esm.sh/@supabase/supabase-js@2');
        this.supabaseClient = createClient(this.supabaseUrl, this.supabaseKey);
        console.log('‚úÖ [UniversalBot] Client Supabase unique cr√©√© avec succ√®s');
      }
      return this.supabaseClient;
    } catch (error) {
      console.error('‚ùå [UniversalBot] Erreur cr√©ation client principal, fallback temporaire:', error);
      // Fallback: cr√©er un client temporaire en cas d'erreur
      const { createClient } = await import('https://esm.sh/@supabase/supabase-js@2');
      return createClient(this.supabaseUrl, this.supabaseKey);
    }
  }

  /**
   * R√©cup√©rer le nom de cat√©gorie depuis la base de donn√©es
   */
  private async getCategoryNameFromProduct(productId: number): Promise<string | null> {
    try {
      // üîß OPTIMISATION: Utilisation du client unique
      const supabase = await this.getSupabaseClient();
      
      const { data } = await supabase
        .from('france_products')
        .select('france_menu_categories(name)')
        .eq('id', productId)
        .single();
      
      return data?.france_menu_categories?.name || null;
    } catch (error) {
      console.error('Erreur r√©cup√©ration nom cat√©gorie:', error);
      return null;
    }
  }

  /**
   * Point d'entr√©e principal - traite tous les messages WhatsApp
   * COPIE EXACTE DE LA LOGIQUE ORIGINALE pour maintenir la compatibilit√©
   */
  async handleMessage(phoneNumber: string, message: string): Promise<void> {
    try {
      // NOUVEAU: D√©tection partage position GPS
      if (message.startsWith('GPS:')) {
        await this.handleGpsLocationReceived(phoneNumber, message);
        return;
      }

      // PRIORIT√â 1: D√©tection num√©ro t√©l√©phone restaurant (acc√®s QR code)
      const isPhone = this.isPhoneNumberFormat(message);
      
      if (isPhone) {
        console.log('üì± Format t√©l√©phone d√©tect√©:', message);
        const restaurant = await this.findRestaurantByPhone(message);
        
        if (restaurant) {
          console.log(`‚úÖ Restaurant trouv√©: ${restaurant.name}`);
          await this.handleDirectRestaurantAccess(phoneNumber, restaurant);
          return;
        } else {
          console.log('‚ùå Restaurant non trouv√© pour ce num√©ro');
          await this.messageSender.sendMessage(phoneNumber, 
            `‚ùå Aucun restaurant trouv√© avec le num√©ro ${message}.\nüí° V√©rifiez le num√©ro ou contactez le restaurant directement.`);
          return;
        }
      }
      
      // PRIORIT√â 2: D√©tection commande annulation
      if (message.toLowerCase().trim() === 'annuler') {
        const result = await this.cancellationService.handleCancellationRequest(phoneNumber);
        await this.messageSender.sendMessage(phoneNumber, result.message);
        return;
      }

      // PRIORIT√â 2.5: D√©tection mot-cl√© "resto" (AVANT v√©rification session)
      if (message.toLowerCase().trim() === 'resto') {
        await this.handleRestoCommand(phoneNumber);
        return;
      }

      // TEST HORAIRE - Commande temporaire pour v√©rifier timezone
      // COMMENT√â - Test valid√© le 2025-10-08
      // if (message.toLowerCase().trim() === 'testhoraire') {
      //   await this.handleTestHoraireCommand(phoneNumber);
      //   return;
      // }

      // PRIORIT√â 3: Messages classiques (salut/bonjour) - Menu g√©n√©rique
      if (message.toLowerCase().includes('salut') || message.toLowerCase().includes('bonjour')) {
        await this.handleGenericGreeting(phoneNumber);
        return;
      }

      // PRIORIT√â 3.5: Gestion des r√©ponses RGPD (OK/NON)
      if (message.toLowerCase().trim() === 'ok' || message.toLowerCase().trim() === 'non') {
        // V√©rifier si un workflow est en attente de consentement
        const supabase = await this.getSupabaseClient();
        const { data: pendingWorkflow } = await supabase
          .from('france_gdpr_consents')
          .select('pending_workflow')
          .eq('phone_number', phoneNumber)
          .maybeSingle();

        if (pendingWorkflow && pendingWorkflow.pending_workflow) {
          // Workflow en attente ‚Üí Traiter comme r√©ponse √† l'√©cran RGPD
          await this.handleGDPRConsent(phoneNumber, message);
          return;
        }
      }

      // PRIORIT√â 4: Gestion compl√®te des messages selon l'√©tat de session

      // ANTI-SESSION PARASITE : V√©rifier existence session AVANT getSession()
      const sessionExists = await this.sessionManager.checkSessionExists(phoneNumber);


      if (!sessionExists &&
          message.toLowerCase() !== 'resto' &&
          !this.isPhoneNumber(message)) {


        await this.messageSender.sendMessage(phoneNumber,
          `‚è∞ *SESSION EXPIR√âE !*

üìù Votre temps pour ajouter une note est termin√©
üïê Les notes doivent √™tre envoy√©es dans les 5 minutes

üéØ *Que faire maintenant ?*
üçï Tapez *"resto"* ‚Üí Voir tous les restaurants
üî¢ Tapez *le num√©ro du resto* ‚Üí Acc√©der directement
üìû Besoin d'aide ? Contactez le restaurant`
        );

        return; // Arr√™ter le traitement - PAS de session cr√©√©e
      }

      // Maintenant on peut r√©cup√©rer la session en s√©curit√©
      const session = await this.sessionManager.getSession(phoneNumber);

      console.log('üîÑ [SESSION_GET] Session r√©cup√©r√©e:', {
        sessionExists: !!session,
        sessionId: session?.id,
        botState: session?.botState,
        botStateType: typeof session?.botState,
        restaurantId: session?.restaurantId,
        currentStep: (session as any)?.currentStep,
        message: message,
        phoneNumber: phoneNumber
      });


      if (session && (session.restaurantId || session.botState === 'CHOOSING_RESTAURANT_MODE')) {
        // L'utilisateur a une session active avec restaurant s√©lectionn√©
        // Charger le contexte restaurant seulement si ID restaurant valide
        if (session.restaurantId) {
          await this.loadAndSetRestaurantContext(session.restaurantId);
        }
        
        await this.handleSessionMessage(phoneNumber, session, message);
        return;
      }
      
      // Pas de session active - s√©lection par num√©ro = erreur
      const menuNumber = parseInt(message.trim());
      if (menuNumber >= 1 && menuNumber <= 9) {
        await this.messageSender.sendMessage(phoneNumber, 
          `üîç S√©lection cat√©gorie ${menuNumber}\n‚ùå **Session expir√©e ou restaurant non s√©lectionn√©**\nüí° **Comment commander :**\nüì± Scannez le QR code du restaurant souhait√©\nüçΩÔ∏è Le menu appara√Ætra automatiquement\nüéØ Puis tapez le num√©ro de votre choix\n**Scannez le QR code pour commencer !**`);
        return;
      }
      
      // PRIORIT√â 5: R√©ponse par d√©faut

      await this.messageSender.sendMessage(phoneNumber,
        `ü§ñ Message re√ßu : "${message}"\nüöß Bot universel op√©rationnel.\nüí° **Comment commander :**\n‚Ä¢ Scannez le QR code du restaurant\n‚Ä¢ Ou tapez "salut" pour voir les infos\nStatus : Bot universel ‚úÖ`);

    } catch (error) {
      console.error('‚ùå [UniversalBot] Erreur traitement message:', error);
      await this.handleError(phoneNumber, error as Error);
    }
  }

  /**
   * Routage intelligent des messages selon l'√©tat
   * SOLID - Strategy Pattern : Diff√©rentes strat√©gies selon l'√©tat
   */
  private async routeMessage(
    session: BotSession, 
    config: RestaurantConfig, 
    message: string
  ): Promise<void> {
    
    switch (session.botState.mode) {
      case 'workflow_active':
        console.log(`üîÑ [Route] Workflow actif: ${session.currentWorkflowId}`);
        await this.handleWorkflowMessage(session, config, message);
        break;
        
      case 'cart_management':
        console.log('üõí [Route] Gestion panier');
        await this.handleCartMessage(session, config, message);
        break;
        
      case 'menu_browsing':
      default:
        console.log('üìã [Route] Navigation menu');
        await this.handleMenuBrowsing(session, config, message);
        break;
    }
  }

  /**
   * Gestion des messages pendant un workflow actif
   * SOLID - Delegation : D√©l√®gue √† WorkflowExecutor
   */
  private async handleWorkflowMessage(
    session: BotSession,
    config: RestaurantConfig,
    message: string
  ): Promise<void> {
    
    if (!session.currentWorkflowId || !session.workflowStepId) {
      console.error('‚ùå [Workflow] Session corrompue - workflow_id ou step_id manquant');
      await this.resetToMenuBrowsing(session);
      return;
    }

    // R√©cup√©rer la d√©finition du workflow
    const workflows = await this.configManager.getWorkflows(session.restaurantId);
    const workflow = workflows.find(w => w.workflowId === session.currentWorkflowId);
    
    if (!workflow) {
      console.error(`‚ùå [Workflow] Workflow non trouv√©: ${session.currentWorkflowId}`);
      await this.resetToMenuBrowsing(session);
      return;
    }

    // R√©cup√©rer les √©tapes du workflow
    const steps = await this.configManager.getWorkflowSteps(workflow.id);
    const currentStep = steps.find(s => s.stepId === session.workflowStepId);
    
    if (!currentStep) {
      console.error(`‚ùå [Workflow] √âtape non trouv√©e: ${session.workflowStepId}`);
      await this.resetToMenuBrowsing(session);
      return;
    }

    console.log(`‚ö° [Workflow] Ex√©cution √©tape: ${currentStep.title}`);

    // D√©l√©guer l'ex√©cution au WorkflowExecutor
    const context = {
      session,
      currentStep,
      userInput: message,
      previousResults: [] // TODO: Impl√©menter historique
    };

    const result = await this.workflowExecutor.executeStep(currentStep, context);
    
    if (result.success) {
      console.log('‚úÖ [Workflow] √âtape r√©ussie');
      
      // üîß [CATBUG_FIX] Gestion des actions sp√©ciales
      if (result.outputData?.action === 'RETURN_MENU') {
        console.log('üîÑ [CATBUG_FIX] Action RETURN_MENU d√©tect√©e - transition vers VIEWING_MENU');
        
        // Transition d'√©tat directe vers VIEWING_MENU
        console.log('üìù [UPDATE_SESSION_01] UniversalBot ligne 283');
        await this.sessionManager.updateSession(session.id, {
          bot_state: 'VIEWING_MENU'
        });
        
        // Appeler la logique de retour aux cat√©gories via CompositeWorkflowExecutor
        if (this.compositeWorkflowExecutor) {
          await this.compositeWorkflowExecutor.returnToCategories(session.phoneNumber, { ...session, bot_state: 'VIEWING_MENU' });
        }
        
        console.log('‚úÖ [CATBUG_FIX] Transition RETURN_MENU compl√©t√©e');
        return; // Sortir imm√©diatement, pas de traitement suppl√©mentaire
      }
      
      // Mettre √† jour la session si n√©cessaire
      if (result.shouldUpdateSession) {
        await this.updateSessionFromResult(session, result);
      }
      
      // Envoyer message de r√©ponse si n√©cessaire
      if (result.message) {
        await this.messageSender.sendMessage(session.phoneNumber, result.message);
      }
      
    } else {
      console.log('‚ùå [Workflow] √âtape √©chou√©e:', result.errors);
      await this.handleWorkflowError(session, result);
    }
  }

  /**
   * Gestion des messages pour navigation dans les menus
   * SOLID - Strategy : Strat√©gie diff√©rente pour chaque mode
   */
  private async handleMenuBrowsing(
    session: BotSession,
    config: RestaurantConfig,
    message: string
  ): Promise<void> {
    
    console.log('üìã [MenuBrowsing] Analyse du message pour d√©clenchement workflow');
    
    // Analyser si le message d√©clenche un workflow
    const workflows = await this.configManager.getWorkflows(session.restaurantId);
    
    for (const workflow of workflows) {
      if (await this.shouldTriggerWorkflow(workflow, message, session)) {
        console.log(`üöÄ [MenuBrowsing] D√©clenchement workflow: ${workflow.name}`);
        await this.startWorkflow(session, workflow);
        return;
      }
    }
    
    // Aucun workflow d√©clench√© - traitement menu standard
    await this.handleStandardMenuNavigation(session, config, message);
  }

  /**
   * Gestion du panier
   */
  private async handleCartMessage(
    session: BotSession,
    config: RestaurantConfig,
    message: string
  ): Promise<void> {
    
    console.log('üõí [Cart] Gestion panier - TODO: Impl√©menter');
    // TODO: Impl√©menter gestion panier
  }

  /**
   * D√©marrage d'un workflow
   * SOLID - Command Pattern : Encapsule l'action de d√©marrer un workflow
   */
  private async startWorkflow(
    session: BotSession,
    workflow: WorkflowDefinition
  ): Promise<void> {
    
    console.log(`üé¨ [StartWorkflow] D√©marrage: ${workflow.name}`);
    
    // R√©cup√©rer la premi√®re √©tape
    const steps = await this.configManager.getWorkflowSteps(workflow.id);
    const firstStep = steps.find(s => s.stepOrder === 1);
    
    if (!firstStep) {
      console.error(`‚ùå [StartWorkflow] Aucune premi√®re √©tape trouv√©e pour workflow ${workflow.workflowId}`);
      return;
    }

    // Mettre √† jour la session
    console.log('üìù [UPDATE_SESSION_02] UniversalBot ligne 373');
    await this.sessionManager.updateSession(session.id, {
      botState: { ...session.botState, mode: 'workflow_active' },
      currentWorkflowId: workflow.workflowId,
      workflowStepId: firstStep.stepId,
      workflowData: {
        workflowId: workflow.workflowId,
        currentStepId: firstStep.stepId,
        stepHistory: [],
        selectedItems: {},
        validationErrors: []
      }
    });

    // Ex√©cuter la premi√®re √©tape
    const updatedSession = await this.sessionManager.getSession(session.phoneNumber);
    const context = {
      session: updatedSession,
      currentStep: firstStep,
      userInput: '', // Pas d'input utilisateur pour la premi√®re √©tape
      previousResults: []
    };

    const result = await this.workflowExecutor.executeStep(firstStep, context);
    
    if (result.message) {
      await this.messageSender.sendMessage(session.phoneNumber, result.message);
    }
  }

  /**
   * V√©rifie si un workflow peut se d√©clencher dans la cat√©gorie actuelle
   * S√âCURIT√â : Emp√™che les workflows pizza hors contexte pizza
   */
  private isWorkflowAllowedInCurrentContext(
    workflowId: string,
    session: BotSession
  ): boolean {
    // R√©cup√©rer la cat√©gorie actuelle
    const currentCategoryId = session.sessionData?.currentCategoryId ||
                             session.sessionData?.selectedCategoryId;

    // Si pas de cat√©gorie, on est dans le menu principal = OK
    if (!currentCategoryId) {
      return true; // Permettre dans menu principal
    }

    // Trouver le slug de la cat√©gorie
    const categories = session.sessionData?.categories || [];
    const currentCategory = categories.find((c: any) => c.id === currentCategoryId);
    const categorySlug = currentCategory?.slug || '';

    // R√àGLE SIMPLE : Workflows MENU_X uniquement dans pizza/menu
    const isPizzaWorkflow = workflowId.startsWith('MENU_');
    const isPizzaCategory = categorySlug.includes('pizza') ||
                            categorySlug.includes('menu');

    // Si workflow pizza, doit √™tre dans cat√©gorie pizza
    if (isPizzaWorkflow && !isPizzaCategory) {
      console.log(`üö´ [S√âCURIT√â] ${workflowId} bloqu√© dans cat√©gorie "${categorySlug}"`);
      return false;
    }

    return true;
  }

  /**
   * V√©rifier si un workflow doit √™tre d√©clench√©
   */
  private async shouldTriggerWorkflow(
    workflow: WorkflowDefinition,
    message: string,
    session: BotSession
  ): Promise<boolean> {

    console.log(`üîç [WORKFLOW] V√©rification ${workflow.workflowId} pour message "${message}"`);

    // NOUVELLE S√âCURIT√â : V√©rifier le contexte AVANT tout
    if (!this.isWorkflowAllowedInCurrentContext(workflow.workflowId, session)) {
      return false;
    }

    // Garder la logique existante mais simplifi√©e
    if (workflow.workflowId === 'MENU_1_WORKFLOW' && message === '1') {
      console.log(`‚úÖ [WORKFLOW] MENU_1_WORKFLOW activ√©`);
      return true;
    }
    if (workflow.workflowId === 'MENU_2_WORKFLOW' && message === '2') {
      console.log(`‚úÖ [WORKFLOW] MENU_2_WORKFLOW activ√©`);
      return true;
    }
    if (workflow.workflowId === 'MENU_3_WORKFLOW' && message === '3') {
      console.log(`‚úÖ [WORKFLOW] MENU_3_WORKFLOW activ√©`);
      return true;
    }
    if (workflow.workflowId === 'MENU_4_WORKFLOW' && message === '4') {
      console.log(`‚úÖ [WORKFLOW] MENU_4_WORKFLOW activ√©`);
      return true;
    }

    return false;
  }

  /**
   * Navigation menu standard (quand aucun workflow n'est actif)
   */
  private async handleStandardMenuNavigation(
    session: BotSession,
    config: RestaurantConfig,
    message: string
  ): Promise<void> {
    
    // TODO: Impl√©menter navigation standard
    console.log('üìã [StandardNav] Navigation standard - TODO: Impl√©menter');
    
    // R√©ponse temporaire
    await this.messageSender.sendMessage(
      session.phoneNumber, 
      `Message re√ßu: "${message}"\nWorkflows disponibles:\n${config.availableWorkflows.map((w, i) => `${i+1}. ${w}`).join('\n')}`
    );
  }

  /**
   * Mise √† jour session depuis r√©sultat d'√©tape
   */
  private async updateSessionFromResult(
    session: BotSession,
    result: StepResult
  ): Promise<void> {
    
    const updates: Partial<BotSession> = {};
    
    // Mettre √† jour l'√©tape suivante si sp√©cifi√©e
    if (result.nextStepId) {
      updates.workflowStepId = result.nextStepId;
      
      // Mettre √† jour workflowData
      if (session.workflowData) {
        updates.workflowData = {
          ...session.workflowData,
          currentStepId: result.nextStepId,
          stepHistory: [...session.workflowData.stepHistory, session.workflowStepId || '']
        };
      }
    }
    
    // Ajouter donn√©es du r√©sultat
    if (result.data && session.workflowData) {
      updates.workflowData = {
        ...session.workflowData,
        selectedItems: {
          ...session.workflowData.selectedItems,
          [session.workflowStepId || 'unknown']: result.data
        }
      };
    }

    if (Object.keys(updates).length > 0) {
      console.log('üìù [UPDATE_SESSION_03] UniversalBot ligne 477');
      await this.sessionManager.updateSession(session.id, updates);
    }
  }

  /**
   * Gestion des erreurs de workflow
   */
  private async handleWorkflowError(
    session: BotSession,
    result: StepResult
  ): Promise<void> {
    
    console.log('‚ùå [WorkflowError] Gestion erreur workflow');
    
    const errorMessages = result.errors?.map(e => e.message).join('\n') || 'Erreur inconnue';
    await this.messageSender.sendMessage(
      session.phoneNumber, 
      `‚ùå ${errorMessages}\n\n‚ú® Retapez votre choix`
    );
  }

  /**
   * Reset vers navigation menu
   */
  private async resetToMenuBrowsing(session: BotSession): Promise<void> {
    
    console.log('üîÑ [Reset] Retour navigation menu');
    
    await this.sessionManager.updateSession(session.id, {
      botState: { ...session.botState, mode: 'menu_browsing' },
      currentWorkflowId: undefined,
      workflowStepId: undefined,
      workflowData: {
        workflowId: '',
        currentStepId: '',
        stepHistory: [],
        selectedItems: {},
        validationErrors: []
      }
    });
    
    await this.messageSender.sendMessage(
      session.phoneNumber,
      'üîÑ Retour au menu principal\nTapez un num√©ro pour commencer'
    );
  }

  /**
   * Gestion des erreurs globales
   */
  private async handleError(phoneNumber: string, error: Error): Promise<void> {

    console.error('üí• [UniversalBot] Erreur globale:', error);


    await this.messageSender.sendMessage(
      phoneNumber,
      '‚ùå Une erreur est survenue. Tapez "resto" pour recommencer.'
    );
  }

  // ==========================================
  // M√âTHODES UTILITAIRES COPI√âES DE L'ANCIEN BOT
  // ==========================================

  /**
   * V√©rifier si le message est un num√©ro de t√©l√©phone
   */
  private isPhoneNumberFormat(message: string): boolean {
    const cleanMessage = message.trim();
    const phoneRegex = /^\d{7,}$/; // Au moins 7 chiffres, que des chiffres
    return phoneRegex.test(cleanMessage);
  }

  /**
   * Trouver un restaurant par son num√©ro de t√©l√©phone
   */
  private async findRestaurantByPhone(phoneNumber: string): Promise<any> {
    try {
      // Essayer diff√©rents formats de normalisation
      const formats = [
        phoneNumber, // Format original (ex: 0177123456)
        `+33${phoneNumber.substring(1)}`, // Format international (ex: +330177123456)
        `33${phoneNumber.substring(1)}` // Format sans + (ex: 330177123456)
      ];
      
      const supabase = await this.getSupabaseClient();

      for (const format of formats) {
        const { data: restaurant, error } = await supabase
          .from('france_restaurants')
          .select('*')
          .or(`phone.eq.${format},whatsapp_number.eq.${format}`)
          .single();

        if (restaurant) {
          console.log('‚úÖ Restaurant trouv√©:', restaurant.name);
          return restaurant;
        }
      }
      
      console.log('‚ùå Aucun restaurant trouv√© avec ce num√©ro');
      return null;
    } catch (error) {
      console.error('‚ùå Erreur recherche restaurant:', error);
      return null;
    }
  }

  /**
   * D√©finir le contexte restaurant pour tous les services
   */
  private setRestaurantContext(restaurant: any): void {
    if (restaurant) {
      this.currentRestaurantContext = this.timezoneService.createContext(restaurant);
      this.timezoneService.setCurrentContext(restaurant);
      console.log(`üåç [Context] Restaurant context d√©fini: ${restaurant.name} - Timezone: ${this.currentRestaurantContext.timezone}`);
    }
  }
  
  /**
   * Charger et d√©finir le contexte restaurant depuis un ID
   */
  private async loadAndSetRestaurantContext(restaurantId: number): Promise<void> {
    try {
      // üîß OPTIMISATION: Utilisation du client unique
      const supabase = await this.getSupabaseClient();
      
      const { data: restaurant } = await supabase
        .from('france_restaurants')
        .select('*')
        .eq('id', restaurantId)
        .single();
      
      if (restaurant) {
        this.setRestaurantContext(restaurant);

        // üí∞ Charger la configuration restaurant pour la devise
        console.log(`üí∞ [Currency] Chargement config restaurant ${restaurantId} pour devise...`);
        try {
          this.restaurantConfig = await this.configManager.getConfig(restaurantId);
          console.log(`‚úÖ [Currency] Config charg√©e - Devise: ${this.restaurantConfig.currency}`);
        } catch (configError) {
          console.error(`‚ùå [Currency] Erreur chargement config:`, configError);
          this.restaurantConfig = null;
        }
      }
    } catch (error) {
      console.error(`‚ùå [Context] Erreur chargement restaurant ${restaurantId}:`, error);
    }
  }
  
  /**
   * Obtenir le contexte restaurant actuel
   */
  private getRestaurantContext(): RestaurantContext | null {
    return this.currentRestaurantContext;
  }


  /**
   * G√©rer l'acc√®s direct √† un restaurant
   */
  private async handleDirectRestaurantAccess(phoneNumber: string, restaurant: any): Promise<void> {
    try {
      // ‚úÖ RGPD : V√©rifier le consentement AVANT toute action
      const hasGdprConsent = await this.checkGdprConsent(phoneNumber);

      if (!hasGdprConsent) {
        // Pas de consentement ‚Üí Stocker le contexte en base avec le restaurant et afficher l'√©cran
        await this.savePendingWorkflow(phoneNumber, { type: 'direct_access', restaurant });
        await this.showGdprConsentScreen(phoneNumber);
        return; // Arr√™ter le traitement
      }

      // ‚úÖ Consentement valid√© ‚Üí Continuer le workflow normal
      // V√âRIFICATION DES HORAIRES avec le service d√©di√©
      const scheduleResult = this.scheduleService.checkRestaurantSchedule(restaurant);
      
      if (!scheduleResult.isOpen) {
        // Restaurant ferm√© - Utiliser le service pour g√©n√©rer le message
        const closedMessage = this.scheduleService.getScheduleMessage(scheduleResult, restaurant.name);
        await this.messageSender.sendMessage(phoneNumber, closedMessage);
        return;
      }
      
      // Premier message : Bienvenue personnalis√©
      const welcomeMessage = `üá´üá∑ Bonjour ! Bienvenue chez ${restaurant.name} !\nüçï ${restaurant.description || 'D√©couvrez notre d√©licieux menu'}\nüìç ${restaurant.address || 'Restaurant disponible'}`;
      await this.messageSender.sendMessage(phoneNumber, welcomeMessage);
      
      // Charger les modes de livraison disponibles depuis la base de donn√©es
      const availableModes = await this.deliveryModesService.getAvailableModes(restaurant.id);

      // Deuxi√®me message : Choix du mode de livraison (dynamique)
      const deliveryModeMessage = this.deliveryModesService.formatModesMessage(availableModes);
      await this.messageSender.sendMessage(phoneNumber, deliveryModeMessage);

      // ‚ö° D√âFINIR LE CONTEXTE RESTAURANT AVANT TOUTE OP√âRATION DE SESSION
      this.setRestaurantContext(restaurant);

      // üéØ [STEP1] Suppression des sessions existantes
      console.log('üéØ [STEP1] Suppression sessions utilisateur existantes...');
      try {
        await this.sessionManager.deleteSessionsByPhone(phoneNumber);
        console.log('‚úÖ [STEP1] Sessions supprim√©es avec succ√®s');
      } catch (deleteError) {
        console.error('üö® [DEBUG_RESTAURANT_ACCESS] === STEP1 √âCHEC ===');
        console.error('‚ùå [STEP1] Erreur suppression sessions:', deleteError);
        console.error('üö® [DEBUG_RESTAURANT_ACCESS] deleteError.message:', deleteError?.message);
        console.error('üö® [DEBUG_RESTAURANT_ACCESS] deleteError.stack:', deleteError?.stack);
        throw deleteError;
      }
      
      // üéØ [STEP2] Cr√©ation nouvelle session restaurant
      console.log('üéØ [STEP2] Cr√©ation nouvelle session restaurant...');
      let session;
      try {
        session = await this.sessionManager.createSessionForRestaurant(
          phoneNumber,
          restaurant,
          'CHOOSING_DELIVERY_MODE',
          {
            selectedRestaurantId: restaurant.id,
            selectedRestaurantName: restaurant.name,
            availableModes: availableModes.map(m => m.mode)
          }
        );
      } catch (createError) {
        console.error('‚ùå [STEP2] Erreur cr√©ation session:', createError);
        throw createError;
      }

    } catch (error) {
      console.error('‚ùå [DirectAccess] Erreur d√©taill√©e:', {
        message: error.message,
        stack: error.stack,
        error: error
      });
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur lors de l\'acc√®s au restaurant.');
    }
  }
  
  /**
   * Cr√©er une session pour un restaurant (√©quivalent de SimpleSession.create)
   */
  private async createSessionForRestaurant(phoneNumber: string, restaurant: any): Promise<any> {
    console.log('üî• [DEBUT_CREATE_SESSION] D√©but createSessionForRestaurant pour:', phoneNumber, 'restaurant:', restaurant.name);
    console.log('üöÄ [VERSION_2024_12_20] Nouvelle version avec debug d√©taill√©');
    console.log('üî• [STEP0] Juste avant le try');
    try {
      console.log('üî• [STEP1] Dans le try, avant import supabase...');
      console.log('üî• [STEP2] Utilisation client unique...');
      const supabase = await this.getSupabaseClient();
      console.log('üî• [STEP3] Client r√©cup√©r√© avec succ√®s');
      
      // Supprimer les sessions existantes
      console.log('üîß [DeleteSession] Tentative suppression pour phoneNumber:', phoneNumber);
      
      // D'abord v√©rifier si des sessions existent
      const { data: existingSessions, error: selectError } = await supabase
        .from('france_user_sessions')
        .select('*')
        .eq('phone_number', phoneNumber);
        
      console.log('üîß [DeleteSession] Sessions existantes trouv√©es:', existingSessions?.length || 0);
      if (existingSessions && existingSessions.length > 0) {
        console.log('üîß [DeleteSession] D√©tail sessions:', existingSessions);
      }
      
      const deleteResult = await supabase
        .from('france_user_sessions')
        .delete()
        .eq('phone_number', phoneNumber);
      
      console.log('üîß [DeleteSession] R√©sultat suppression:', deleteResult);
      
      if (deleteResult.error) {
        console.error('‚ùå [CreateSession] Erreur suppression:', deleteResult.error);
      } else {
        console.log('‚úÖ [DeleteSession] Suppression r√©ussie');
        
        // V√©rifier si suppression effective
        const { data: remainingSessions } = await supabase
          .from('france_user_sessions')
          .select('*')
          .eq('phone_number', phoneNumber);
        console.log('üîß [DeleteSession] Sessions restantes apr√®s suppression:', remainingSessions?.length || 0);
      }
      
      // Cr√©er nouvelle session avec l'√©tat CHOOSING_DELIVERY_MODE
      const expiresAt = new Date(this.getCurrentTime().getTime() + SESSION_DURATION_MINUTES * 60 * 1000); // 4 heures depuis heure Paris
      
      const { data: newSession, error } = await supabase
        .from('france_user_sessions')
        .insert({
          phone_number: phoneNumber,
          chat_id: phoneNumber,
          restaurant_id: restaurant.id,
          current_step: 'CHOOSING_DELIVERY_MODE',
          session_data: JSON.stringify({
            selectedRestaurantId: restaurant.id,
            selectedRestaurantName: restaurant.name
          }),
          cart_items: JSON.stringify([]),
          total_amount: 0,
          expires_at: expiresAt,
          workflow_data: JSON.stringify({}),
          workflow_step_id: null
        })
        .select()
        .single();
      
      if (error) {
        console.error('‚ùå [CreateSession] Erreur cr√©ation session:', error);
        throw error;
      }
      
      return newSession;
      
    } catch (error) {
      console.error('‚ùå [CreateSession] Erreur cr√©ation session:', error);
      throw error;
    }
  }

  /**
   * G√©rer les salutations g√©n√©riques
   */
  private async handleGenericGreeting(phoneNumber: string): Promise<void> {
    try {
      const supabase = await this.getSupabaseClient();
      
      // Test connexion BDD
      const { data: restaurants, error } = await supabase
        .from('france_restaurants')
        .select('*')
        .eq('is_active', true)
        .limit(1);
        
      if (error) {
        console.error('‚ùå Erreur BDD:', error);
        await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur de connexion √† la base de donn√©es.');
        return;
      }
      
      // Premier message : Bienvenue g√©n√©rique
      await this.messageSender.sendMessage(phoneNumber, 
        `üá´üá∑ Bonjour ! Bienvenue sur notre syst√®me de commande !\nüçï ${restaurants?.length || 0} restaurant(s) disponible(s)\n${restaurants?.[0] ? `‚úÖ ${restaurants[0].name}` : '‚ùå Aucun restaurant'}\nüí° Scannez le QR code du restaurant pour acc√©der directement √† son menu !`);
      
      // Deuxi√®me message : Exemple de menu
      let menuText = 'üçΩÔ∏è *SYSTEME DE COMMANDE*\n\n';
      menuText += 'üì± **Comment commander :**\n';
      menuText += '1. Scannez le QR code du restaurant\n';
      menuText += '2. Le menu appara√Ætra automatiquement\n';
      menuText += '3. Tapez le num√©ro de votre choix\n\n';
      menuText += 'üí° **Chaque restaurant a son menu personnalis√© !**\n';
      menuText += 'üîç Exemple de cat√©gories : Tacos, Burgers, Pizzas, etc.\n\n';
      menuText += 'üì± **Scannez le QR code pour commencer !**';
      
      await this.messageSender.sendMessage(phoneNumber, menuText);
      
    } catch (error) {
      console.error('‚ùå [GenericGreeting] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur lors de l\'affichage du menu g√©n√©rique.');
    }
  }

  /**
   * G√©rer les messages de session active - COPI√â DE L'ANCIEN BOT
   * Maintient la compatibilit√© exacte avec le workflow existant
   */
  private async handleSessionMessage(phoneNumber: string, session: any, message: string): Promise<void> {
    
    const normalizedMessage = message.toLowerCase().trim();
    
    // Commandes globales
    if (normalizedMessage === 'annuler') {
      await this.deleteSession(phoneNumber);
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Session annul√©e. Tapez le num√©ro du restaurant pour recommencer.');
      return;
    }

    // Nouveau handler global "resto"
    if (normalizedMessage === 'resto') {
      await this.handleRestoCommand(phoneNumber);
      return;
    }


    switch (session.botState) {
      case 'AWAITING_GEOLOCATION':
        // NOUVEAU: Gestion de la g√©olocalisation pour livraison (Guin√©e)
        await this.handleGeolocationSharing(phoneNumber, session, message);
        break;

      case 'POST_ORDER_NOTES':
        // Gestion des notes post-commande
        if (this.getCurrentTime().getTime() > session.sessionData?.expiresAt) {
          await this.deleteSession(phoneNumber);
          return;
        }

        if (message.toLowerCase().includes('annuler')) {
          await this.deleteSession(phoneNumber);
          return; // Laisse handler annulation traiter
        }

        if (message.toLowerCase() === 'resto') {
          await this.deleteSession(phoneNumber);
          return; // Continue workflow normal
        }

        await this.handlePostOrderNote(phoneNumber, session, message);
        return;

      case 'CHOOSING_DELIVERY_MODE':
        await this.handleDeliveryModeChoice(phoneNumber, session, message);
        break;
        
      case 'VIEWING_MENU':
        await this.handleMenuNavigation(phoneNumber, session, message);
        break;
        
      case 'VIEWING_CATEGORY':
        await this.handleCategoryNavigation(phoneNumber, session, message);
        break;
        
      case 'SELECTING_PRODUCTS':
        await this.handleProductSelection(phoneNumber, session, message);
        break;
        
      case 'COMPOSITE_WORKFLOW_STEP':
        await this.compositeWorkflowExecutor.handleWorkflowStepResponse(phoneNumber, session, message);
        break;
        
      case 'MENU_PIZZA_WORKFLOW':
        await this.compositeWorkflowExecutor.handleMenuPizzaResponse(phoneNumber, session, message);
        break;
        
      case 'AWAITING_SIZE_SELECTION':
        await this.compositeWorkflowExecutor.handleSizeSelection(phoneNumber, session, message);
        break;
        
      case 'AWAITING_UNIVERSAL_WORKFLOW':
        await this.compositeWorkflowExecutor.handleUniversalWorkflowResponse(phoneNumber, session, message);
        break;
        
      case 'AWAITING_WORKFLOW_ACTIONS':
        await this.handleWorkflowActions(phoneNumber, session, message);
        break;
        
      case 'AWAITING_CART_ACTIONS':
        await this.handleCartActions(phoneNumber, session, message);
        break;
        
      case 'AWAITING_CANCELLATION_CONFIRMATION':
        await this.handleCancellationConfirmationFlow(phoneNumber, session, message);
        break;
        
      case 'AWAITING_QUANTITY':
        await this.handleQuantityInput(phoneNumber, session, message);
        break;
        
      case 'AWAITING_DELIVERY_MODE_CHOICE':
        await this.handleDeliveryModeSelection(phoneNumber, session, message);
        break;
        
      case 'AWAITING_ADDRESS_CHOICE':
        await this.handleAddressChoice(phoneNumber, session, message);
        break;

      case 'AWAITING_NEW_ADDRESS':
        await this.handleNewAddressInput(phoneNumber, session, message);
        break;

      case 'AWAITING_GPS_LOCATION':
        await this.handleGpsLocationShare(phoneNumber, session, message);
        break;

      case 'AWAITING_GPS_LABEL':
        await this.handleGpsLabelChoice(phoneNumber, session, message);
        break;

      case 'AWAITING_GPS_CUSTOM_LABEL':
        await this.handleGpsCustomLabel(phoneNumber, session, message);
        break;

      case 'AWAITING_ADDRESS_CONFIRMATION':
        await this.handleAddressConfirmation(phoneNumber, session, message);
        break;
        
      case 'AWAITING_OUT_OF_ZONE_CHOICE':
        await this.handleOutOfZoneChoice(phoneNumber, session, message);
        break;
        
      // =================================
      // NOUVEAU: CAS HANDLER GLOBAL "RESTO"
      // =================================
      
      case 'CHOOSING_RESTAURANT_MODE':
        await this.handleRestaurantModeSelection(phoneNumber, session, message);
        break;

      case 'AWAITING_USER_LOCATION':
        await this.handleLocationMessage(phoneNumber, session, message);
        break;
        
      case 'SELECTING_FROM_LIST':
        await this.handleRestaurantSelection(phoneNumber, session, message);
        break;
        
      default:
        await this.messageSender.sendMessage(phoneNumber, 
          `‚ùå √âtat de session non reconnu.\nTapez le num√©ro du restaurant pour recommencer.`);
        break;
    }
  }
  
  /**
   * G√©rer le choix du mode de livraison
   */
  private async handleDeliveryModeChoice(phoneNumber: string, session: any, message: string): Promise<void> {
    const modeChoice = parseInt(message.trim());
    
    // R√©cup√©rer les modes disponibles depuis la session
    const availableModes = session.sessionData?.availableModes || ['sur_place', 'a_emporter', 'livraison'];
    console.log(`üöö [DeliveryMode] Modes disponibles: ${availableModes.join(', ')}`);
    
    // Valider que le choix est dans la plage valide
    if (modeChoice < 1 || modeChoice > availableModes.length || isNaN(modeChoice)) {
      // Recharger les modes pour afficher le bon message d'erreur
      const modesForError = await this.deliveryModesService.getAvailableModes(session.restaurantId);
      const errorMessage = `‚ùå Choix invalide. ${this.deliveryModesService.formatModesMessage(modesForError)}`;
      await this.messageSender.sendMessage(phoneNumber, errorMessage);
      return;
    }
    
    // Mapper le choix au mode correspondant (index - 1)
    const deliveryMode = availableModes[modeChoice - 1];
    console.log(`‚úÖ [DeliveryMode] Mode s√©lectionn√©: ${deliveryMode}`);
    
    // R√©cup√©rer les infos restaurant
    const supabase = await this.getSupabaseClient();
    
    const restaurant = await supabase
      .from('france_restaurants')
      .select('*')
      .eq('id', session.restaurantId)
      .single();
    
    if (restaurant.data) {
      await this.showMenuAfterDeliveryModeChoice(phoneNumber, restaurant.data, deliveryMode, session);
      
      // ‚úÖ MAINTENANT on peut mettre √† jour bot_state vers VIEWING_MENU
      await this.sessionManager.updateSession(session.id, {
        botState: 'VIEWING_MENU'
      });
      console.log('‚úÖ [DeliveryMode] Session mise √† jour vers VIEWING_MENU apr√®s affichage du menu');
    }
  }
  
  /**
   * Afficher le menu apr√®s choix du mode de livraison
   */
  private async showMenuAfterDeliveryModeChoice(phoneNumber: string, restaurant: any, deliveryMode: string, existingSession?: any): Promise<void> {
    console.log(`üö® [TRACE_FONCTION_L1133] showMenuAfterDeliveryModeChoice APPEL√âE - UniversalBot.ts:1133`);
    const supabase = await this.getSupabaseClient();
    
    // Chargement dynamique des cat√©gories depuis la BDD
    const { data: categories, error: catError } = await supabase
      .from('france_menu_categories')
      .select('*')
      .eq('restaurant_id', restaurant.id)
      .eq('is_active', true)
      .order('display_order');

    if (catError || !categories || categories.length === 0) {
      console.error('‚ùå Erreur cat√©gories:', catError);
      await this.messageSender.sendMessage(phoneNumber, `‚ùå Menu temporairement indisponible pour ${restaurant.name}.\n\nüí° Contactez le restaurant directement ou r√©essayez plus tard.`);
      return;
    }

    // Construction dynamique du menu
    let menuText = `üçΩÔ∏è *MENU ${restaurant.name.toUpperCase()}*\n`;
    
    // Afficher le mode choisi
    const modeEmoji = deliveryMode === 'sur_place' ? 'üìç' : deliveryMode === 'a_emporter' ? 'üì¶' : 'üöö';
    const modeText = deliveryMode === 'sur_place' ? 'Sur place' : deliveryMode === 'a_emporter' ? '√Ä emporter' : 'Livraison';
    menuText += `${modeEmoji} *Mode: ${modeText}*\n\n`;
    
    categories.forEach((category, index) => {
      const displayNumber = `${index + 1}.`;
      menuText += `${displayNumber} ${category.icon || 'üçΩÔ∏è'} ${category.name}\n`;
    });
    
    menuText += '\nTapez le num√©ro de votre choix pour voir les produits.';

    await this.messageSender.sendMessage(phoneNumber, menuText);
    
    // Mettre √† jour la session vers VIEWING_MENU avec le mode de livraison
    // Utiliser la session existante si fournie, sinon la r√©cup√©rer
    const session = existingSession || await this.sessionManager.getSession(phoneNumber);
    if (session) {
      console.log('üì¶ [showMenuAfterDeliveryModeChoice] Mise √† jour session vers VIEWING_MENU');
      console.log(`üîç [SESSION] Mode s√©lectionn√©: ${deliveryMode}`);
      
      // ‚úÖ CORRUPTION FIX: Parser le JSON si c'est un string avant le spread
      const sessionData = typeof session.sessionData === 'string' ? JSON.parse(session.sessionData) : session.sessionData;
      
      const updatedData = {
        ...sessionData,
        categories: categories,
        deliveryMode: deliveryMode,
        selectedServiceMode: deliveryMode, // NOUVEAU: Ajout pour validation rayon
        cart: sessionData?.cart || {},
        totalPrice: sessionData?.totalPrice || 0,
        // NETTOYAGE COMPLET DES DONN√âES PIZZA
        pizzaOptionsMap: undefined,
        totalPizzaOptions: undefined,
        menuPizzaWorkflow: undefined
      };

      // üö® LOG CRITIQUE - Confirmer le nettoyage
      console.log(`üö® [TRACE_FONCTION_L1192] showMenuAfterDeliveryModeChoice NETTOIE les donn√©es pizza !`);
      console.log(`üö® [TRACE_FONCTION_L1193] Avant nettoyage - pizzaOptionsMap: ${sessionData?.pizzaOptionsMap ? 'EXISTS' : 'UNDEFINED'}`);
      console.log(`üö® [TRACE_FONCTION_L1194] Avant nettoyage - menuPizzaWorkflow: ${sessionData?.menuPizzaWorkflow ? 'EXISTS' : 'UNDEFINED'}`);
      console.log(`üö® [TRACE_FONCTION_L1195] Apr√®s nettoyage - pizzaOptionsMap: ${updatedData.pizzaOptionsMap ? 'EXISTS' : 'UNDEFINED'}`);
      console.log(`üö® [TRACE_FONCTION_L1196] Apr√®s nettoyage - menuPizzaWorkflow: ${updatedData.menuPizzaWorkflow ? 'EXISTS' : 'UNDEFINED'}`);
      
      console.log(`‚úÖ [SESSION] Donn√©es session mises √† jour:`, {
        deliveryMode: updatedData.deliveryMode,
        selectedServiceMode: updatedData.selectedServiceMode,
        hasCategories: !!updatedData.categories,
        cartItems: Object.keys(updatedData.cart || {}).length
      });
      
      // ‚úÖ CORRECTION: Ne pas changer bot_state ici car c'est apr√®s handleDeliveryModeChoice
      // bot_state sera mis √† jour vers VIEWING_MENU une fois que l'utilisateur aura fait son choix
      console.log('üìù [UPDATE_SESSION_04] UniversalBot ligne 1153 - CRITIQUE');
      await this.sessionManager.updateSession(session.id, {
        botState: 'VIEWING_MENU', // ‚úÖ CORRECTION: Reset du bot_state pour sortir du workflow pizza
        currentStep: null, // ‚úÖ CORRECTION: Reset du current_step
        sessionData: updatedData,  // ‚úÖ CORRECTION FINALE: Passer l'objet directement, SessionManager g√®re JSON.stringify
        // üö® [TRACE_FONCTION_L1251] FIX PIZZA BUG: NETTOYER AUSSI workflowData !
        workflowData: {
          workflowId: '',
          currentStepId: '',
          stepHistory: [],
          selectedItems: {},
          validationErrors: [],
          // Nettoyer explicitement les donn√©es pizza de workflowData
          pizzaOptionsMap: undefined,
          totalPizzaOptions: undefined,
          menuPizzaWorkflow: undefined
        }
      });
    }
  }
  
  /**
   * G√©rer la navigation dans les menus
   */
  private async handleMenuNavigation(phoneNumber: string, session: any, message: string): Promise<void> {
    console.log(`üîç [handleMenuNavigation] Message re√ßu: "${message}"`);
    console.log(`üîç [handleMenuNavigation] Message trimmed: "${message.trim()}"`);

    // üîç DEBUG_CART_NAVIGATION - Tracer l'√©tat du panier lors de la navigation
    console.log('üîç DEBUG_CART_NAVIGATION: session.sessionData.cart:', JSON.stringify(session.sessionData?.cart));
    console.log('üîç DEBUG_CART_NAVIGATION: Type cart:', typeof session.sessionData?.cart);

    // S√©lection de cat√©gorie par num√©ro
    const categoryNumber = parseInt(message.trim());
    const categories = session.sessionData?.categories || [];
    
    console.log(`üîç [handleMenuNavigation] Num√©ro pars√©: ${categoryNumber}`);
    console.log(`üîç [handleMenuNavigation] Nombre de cat√©gories: ${categories.length}`);
    console.log(`üîç [handleMenuNavigation] Categories disponibles:`, categories.map((cat: any, index: number) => `${index + 1}: ${cat.name}`));
    console.log(`üîç [handleMenuNavigation] √âtat de session: ${session.botState}`);
    console.log(`üîç [handleMenuNavigation] Session data keys:`, Object.keys(session.sessionData || {}));
    
    // V√©rifier incoh√©rence d'√©tat
    if (session.botState !== 'VIEWING_MENU') {
      console.error(`‚ùå [handleMenuNavigation] INCOH√âRENCE D√âTECT√âE ! handleMenuNavigation appel√© mais √©tat = ${session.botState}`);
    }
    
    if (isNaN(categoryNumber)) {
      console.log(`‚ùå [handleMenuNavigation] Message n'est pas un nombre valide: "${message}"`);
      await this.messageSender.sendMessage(phoneNumber, 
        `‚ùå Veuillez entrer un num√©ro valide entre 1 et ${categories.length}.`);
      return;
    }
    
    if (categoryNumber >= 1 && categoryNumber <= categories.length) {
      const selectedCategory = categories[categoryNumber - 1];
      console.log(`‚úÖ [handleMenuNavigation] Cat√©gorie s√©lectionn√©e: ${selectedCategory.name} (ID: ${selectedCategory.id})`);
      
      const supabase = await this.getSupabaseClient();

      const restaurant = await supabase
        .from('france_restaurants')
        .select('*')
        .eq('id', session.restaurantId)
        .single();
      
      if (restaurant.data) {
        console.log(`‚úÖ [handleMenuNavigation] Restaurant trouv√©: ${restaurant.data.name}`);
        await this.showProductsInCategory(phoneNumber, restaurant.data, session, selectedCategory.id);
      } else {
        console.error(`‚ùå [handleMenuNavigation] Restaurant non trouv√© pour ID: ${session.restaurantId}`);
      }
    } else {
      console.error(`‚ùå [CATBUG_DEBUG] √âCHEC - Num√©ro invalide: ${categoryNumber}. Categories en session: ${categories.length}`);
      console.error(`‚ùå [CATBUG_DEBUG] PROBL√àME IDENTIFI√â - Menu affiche plus de categories que la session n'en contient !`);
      await this.messageSender.sendMessage(phoneNumber, 
        `‚ùå Choix invalide. Choisissez entre 1 et ${categories.length}.\n‚Ü© Tapez 0 pour revenir au menu.`);
    }
  }
  
  /**
   * G√©rer la navigation dans une cat√©gorie
   */
  private async handleCategoryNavigation(phoneNumber: string, session: any, message: string): Promise<void> {
    console.log(`üö® [TRACE_FONCTION_L1265] handleCategoryNavigation APPEL√âE - UniversalBot.ts:1265`);
    // TODO: Impl√©menter la navigation dans les cat√©gories
    console.log('üîÑ [CategoryNavigation] Navigation cat√©gorie - TODO: Impl√©menter');
    await this.messageSender.sendMessage(phoneNumber, 
      `üîÑ Navigation cat√©gorie en cours d'impl√©mentation...\nMessage: ${message}`);
  }
  
  /**
   * G√©rer la s√©lection d'un produit - ARCHITECTURE UNIVERSELLE
   * SOLID : Command Pattern - Chaque s√©lection est une commande
   */
  private async handleProductSelection(phoneNumber: string, session: any, message: string): Promise<void> {
    console.log(`üõí [ProductSelection] Message re√ßu: "${message}"`);
    console.log(`üõí [ProductSelection] √âtat session actuel:`, session.currentState);
    console.log(`üõí [ProductSelection] Session compl√®te:`, JSON.stringify(session.sessionData, null, 2));

    // üö® DEBUG CRITIQUE - Analyser l'√©tat de la session quand on tape "2"
    console.log(`üö® [TRACE_FONCTION_L1300] handleProductSelection - Message: "${message}"`);
    console.log(`üö® [TRACE_FONCTION_L1301] handleProductSelection - bot_state: ${session.botState}`);
    console.log(`üö® [TRACE_FONCTION_L1302] handleProductSelection - pizzaOptionsMap: ${session.sessionData?.pizzaOptionsMap ? 'EXISTS' : 'UNDEFINED'}`);
    console.log(`üö® [TRACE_FONCTION_L1303] handleProductSelection - menuPizzaWorkflow: ${session.sessionData?.menuPizzaWorkflow ? 'EXISTS' : 'UNDEFINED'}`);
    console.log(`üö® [TRACE_FONCTION_L1304] handleProductSelection - currentCategoryId: ${session.sessionData?.currentCategoryId}`);

    
    // R√âUTILISATION: V√©rifier les actions rapides 99, 00 avant parseInt
    const choice = message.trim();
    if (choice === '99' || choice === '00') {
      console.log(`‚ö° [ProductSelection] Action rapide d√©tect√©e: ${choice} - D√©l√©gation √† handleCartActions`);
      await this.handleCartActions(phoneNumber, session, message);
      return;
    }

    // D√©tection multis√©lection
    if (message.includes(',')) {
      await this.handleCategoryMultiSelection(phoneNumber, session, message);
      return;
    }

    const productNumber = parseInt(message.trim());
    const products = session.sessionData?.products || [];
    
    console.log(`üõí [ProductSelection] Num√©ro s√©lectionn√©: ${productNumber}`);
    console.log(`üõí [ProductSelection] ${products.length} produits disponibles`);
    
    // Option 0 : Retour au menu principal
    if (productNumber === 0) {
      console.log('‚Ü©Ô∏è [ProductSelection] Retour au menu principal');
      
      // R√©cup√©rer les cat√©gories et r√©afficher le menu
      const supabase = await this.getSupabaseClient();

      const { data: restaurant } = await supabase
        .from('france_restaurants')
        .select('*')
        .eq('id', session.restaurantId)
        .single();
      
      if (restaurant) {
        const deliveryMode = session.sessionData?.deliveryMode || 'sur_place';
        await this.showMenuAfterDeliveryModeChoice(phoneNumber, restaurant, deliveryMode);
        
        // ‚úÖ APR√àS affichage menu, mettre √† jour √©tat vers VIEWING_MENU pour permettre navigation
        await this.sessionManager.updateSession(session.id, {
          botState: 'VIEWING_MENU'
        });
        console.log('‚úÖ [ProductSelection] √âtat mis √† jour vers VIEWING_MENU apr√®s retour menu "0"');
      }
      return;
    }
    
    // V√©rifier la validit√© du choix - Support affichage unifi√© des pizzas
    let maxValidChoice = products.length;

    // Si c'est un affichage unifi√© de pizzas, accepter les choix √©tendus
    const hasPizzaMap = session.sessionData?.pizzaOptionsMap || session.workflowData?.pizzaOptionsMap;

    // üö® DEBUG CRITIQUE - Analyser le mode pizza
    console.log(`üîç [DEBUG_PIZZA] hasPizzaMap: ${!!hasPizzaMap}`);
    if (hasPizzaMap) {
      console.log(`üîç [DEBUG_PIZZA] pizzaOptionsMap content:`, JSON.stringify(hasPizzaMap, null, 2));
    }

    if (hasPizzaMap) {
      maxValidChoice = session.sessionData?.totalPizzaOptions || session.workflowData?.totalPizzaOptions || products.length;
      console.log(`üçï [ProductSelection] Mode pizza unifi√© - Accepte jusqu'√† ${maxValidChoice}`);
      console.log(`üö® [DEBUG_PIZZA] ATTENTION: Mode pizza activ√© dans une cat√©gorie qui pourrait ne pas √™tre pizza !`);
    }
    
    if (isNaN(productNumber) || productNumber < 1 || productNumber > maxValidChoice) {
      console.log(`‚ùå [ProductSelection] Choix invalide: ${productNumber} (max: ${maxValidChoice})`);
      await this.messageSender.sendMessage(phoneNumber, 
        `‚ùå Choix invalide. Choisissez entre 1 et ${maxValidChoice}.\n‚Ü©Ô∏è Tapez 0 pour revenir au menu.`);
      return;
    }
    

    // G√©rer la s√©lection en mode pizza unifi√© - V√©rifier sessionData ET workflowData
    const pizzaOptionsMap = session.sessionData?.pizzaOptionsMap || session.workflowData?.pizzaOptionsMap;
    const totalPizzaOptions = session.sessionData?.totalPizzaOptions || session.workflowData?.totalPizzaOptions;


    // üîß SOLUTION 1 : D√©tection sp√©ciale Menu Pizza avec discriminant universel
    if (pizzaOptionsMap) {
      // V√©rifier les actions sp√©ciales AVANT le mapping
      if (productNumber === 0 || productNumber === 99) {
        console.log(`‚ö° [ProductSelection] Action sp√©ciale d√©tect√©e: ${productNumber}`);
        // Laisser passer au code normal
      } else {
        const selectedOption = pizzaOptionsMap.find(opt => opt.optionNumber === productNumber);
        
        if (selectedOption) {
          console.log(`‚úÖ [ProductSelection] Option trouv√©e: ${selectedOption.pizzaName} (type: ${selectedOption.type})`);
          
          // D√âTECTION SP√âCIALE MENU PIZZA
          if (selectedOption.type === 'menu_pizza') {
            console.log(`üìã [ProductSelection] Menu Pizza d√©tect√©: ${selectedOption.pizzaName}`);
            
            // R√©cup√©rer le produit complet depuis la base
            // üîß OPTIMISATION: Utilisation du client unique
            const supabase = await this.getSupabaseClient();
            
            const { data: fullProduct } = await supabase
              .from('france_products')
              .select('*')
              .eq('id', selectedOption.pizzaId)
              .single();
            
            if (fullProduct) {
              // D√©marrer le workflow Menu Pizza
              await this.compositeWorkflowExecutor.startMenuPizzaWorkflow(
                phoneNumber,
                fullProduct,
                session
              );
              return;
            }
          } else if (selectedOption.type === 'individual_pizza') {
            console.log(`üçï [ProductSelection] Pizza individuelle: ${selectedOption.pizzaName} ${selectedOption.sizeName}`);
            // Pizza individuelle (comportement existant)
            await this.addPizzaDirectToCart(phoneNumber, session, selectedOption);
            return;
          }
        } else {
          console.log(`‚ùå [ProductSelection] Option ${productNumber} non trouv√©e dans mapping`);
        }
      }
    } else {
      console.log(`üõí [ProductSelection] Utilisation syst√®me classique pour produits standards`);
    }
    
    const selectedProduct = products[productNumber - 1];
    console.log(`‚úÖ [ProductSelection] Produit s√©lectionn√©: ${selectedProduct.name} (ID: ${selectedProduct.id})`);
    
    // CORRECTION: Re-requ√™te le produit complet avec steps_config
    // üîß OPTIMISATION: Utilisation du client unique
    const supabase = await this.getSupabaseClient();
    
    const { data: fullProduct } = await supabase
      .from('france_products')
      .select('*')
      .eq('id', selectedProduct.id)
      .single();
    
    if (fullProduct) {
      // Utiliser le produit complet avec steps_config
      Object.assign(selectedProduct, fullProduct);
      console.log(`‚úÖ [ProductSelection] Produit complet recharg√© avec steps_config:`, !!fullProduct.steps_config);
    }
    
    // D√âBOGAGE : Afficher toutes les propri√©t√©s du produit
    console.log(`üîç [ProductSelection] Propri√©t√©s du produit:`, {
      name: selectedProduct.name,
      requires_steps: selectedProduct.requires_steps,
      workflow_type: selectedProduct.workflow_type,
      type: selectedProduct.type,
      product_type: selectedProduct.product_type,
      has_steps_config: !!selectedProduct.steps_config
    });
    
    // V√©rifier si le produit n√©cessite des √©tapes (workflow composite)
    let isComposite = selectedProduct.requires_steps || selectedProduct.workflow_type || selectedProduct.type === 'composite';
    
    
    // NOUVELLE LOGIQUE : V√©rifier aussi si le produit a des variantes de taille configur√©es
    if (!isComposite) {
      console.log(`üîç [ProductSelection] V√©rification des variantes pour ${selectedProduct.name}...`);
      
      const supabase = await this.getSupabaseClient();

      // V√©rifier dans france_product_sizes
      const { data: sizes } = await supabase
        .from('france_product_sizes')
        .select('id')
        .eq('product_id', selectedProduct.id)
        .eq('is_active', true);
      
      console.log(`üîç [ProductSelection] ${sizes?.length || 0} tailles trouv√©es pour ${selectedProduct.name}`);
      
      if (sizes && sizes.length > 0) {
        isComposite = true;
        console.log(`‚úÖ [ProductSelection] ${selectedProduct.name} d√©tect√© comme ayant des variantes de taille`);
        
      }
    }
    
    // AVANT la v√©rification des pizzas - V√©rifier workflow menu pizza
    // D√©tection UNIVERSELLE des Menu Pizza par cat√©gorie ou workflow_type
    const isMenuPizzaCategory = session.sessionData?.currentCategoryName === 'Menu Pizza' ||
                               session.sessionData?.currentCategorySlug === 'menu-pizza' ||
                               session.sessionData?.currentCategorySlug === 'menu_pizza';
    
    const isMenuPizzaWorkflow = selectedProduct.workflow_type === 'menu_pizza_selection';
    
    if (isMenuPizzaCategory || isMenuPizzaWorkflow) {
        console.log('üçï [MenuPizza] D√©marrage workflow menu pizza pour produit:', selectedProduct.name);
        
        // D√©marrer le workflow menu pizza
        await this.compositeWorkflowExecutor.startMenuPizzaWorkflow(
            phoneNumber,
            selectedProduct,
            session
        );
        return;
    }

    if (isComposite) {
      console.log(`üîÑ [ProductSelection] Produit composite d√©tect√©: ${selectedProduct.workflow_type || selectedProduct.type || 'variants'}`);
      
      try {
        // Lancer le workflow composite universel
        console.log(`üöÄ [ProductSelection] Tentative de d√©marrage workflow composite pour: ${selectedProduct.name}`);
        
        // D√©marrage workflow composite
        
        await this.compositeWorkflowExecutor.startCompositeWorkflow(phoneNumber, selectedProduct, session);
        console.log(`‚úÖ [ProductSelection] Workflow composite d√©marr√© avec succ√®s pour: ${selectedProduct.name}`);
        return;
      } catch (error) {
        console.error(`‚ùå [ProductSelection] ERREUR lors du d√©marrage workflow composite pour ${selectedProduct.name}:`, error);
        console.error(`üìã [ProductSelection] Stack trace:`, error.stack);
        console.error(`üìã [ProductSelection] D√©tails produit:`, {
          id: selectedProduct.id,
          name: selectedProduct.name,
          product_type: selectedProduct.product_type,
          workflow_type: selectedProduct.workflow_type,
          requires_steps: selectedProduct.requires_steps
        });
        throw error; // Re-lancer l'erreur pour qu'elle remonte
      }
    }
    
    // Produit simple - Stocker et traiter avec quantit√© 1
    console.log('üì¶ [ProductSelection] Produit simple - Traitement direct avec quantit√© 1');
    
    // Workflow simple (non-composite)
    
    // Cr√©er session temporaire avec selectedProduct
    const tempSession = {
      ...session,
      sessionData: (() => {
        return {
          ...session.sessionData,
          selectedProduct: selectedProduct
        };
      })()
    };
    
    await this.handleQuantityInput(phoneNumber, tempSession, '1');
  }
  
  /**
   * Afficher les produits d'une cat√©gorie - ARCHITECTURE UNIVERSELLE
   * SOLID : Single Responsibility - Une seule responsabilit√© : afficher les produits
   */
  private async showProductsInCategory(phoneNumber: string, restaurant: any, session: any, categoryId: string): Promise<void> {
    console.log(`üö® [TRACE_FONCTION_L1538] showProductsInCategory APPEL√âE - UniversalBot.ts:1538`);
    console.log(`üì¶ [ShowProducts] Chargement produits cat√©gorie ID: ${categoryId}`);
    
    try {
      const supabase = await this.getSupabaseClient();

      // 1. R√©cup√©rer la cat√©gorie pour son nom et ic√¥ne
      const { data: category } = await supabase
        .from('france_menu_categories')
        .select('*')
        .eq('id', categoryId)
        .single();
      
      if (!category) {
        console.error(`‚ùå [ShowProducts] Cat√©gorie ${categoryId} non trouv√©e`);
        await this.messageSender.sendMessage(phoneNumber, '‚ùå Cat√©gorie non trouv√©e.');
        return;
      }
      
      // 2. R√©cup√©rer les produits actifs de la cat√©gorie
      const { data: products, error } = await supabase
        .from('france_products')
        .select(`
          *,
          france_product_sizes (*),
          france_product_variants (*)
        `)
        .eq('category_id', categoryId)
        .eq('restaurant_id', restaurant.id)
        .eq('is_active', true)
        .order('display_order');
      
      if (error || !products || products.length === 0) {
        console.error('‚ùå [ShowProducts] Erreur ou aucun produit:', error);
        await this.messageSender.sendMessage(phoneNumber,
          `‚ùå Aucun produit disponible dans la cat√©gorie ${category.name}.\n\nTapez un num√©ro pour choisir une autre cat√©gorie.`);
        return;
      }
      
      console.log(`‚úÖ [ShowProducts] ${products.length} produits trouv√©s`);

      // DEBUG: V√©rifier les ic√¥nes r√©cup√©r√©es de la base
      products.forEach(product => {
        if (product.name.includes('TACOS')) {
          console.log(`üîç [DEBUG_SQL_TACOS] Produit r√©cup√©r√© de la base:`);
          console.log(`üîç [DEBUG_SQL_TACOS] - ID: ${product.id}`);
          console.log(`üîç [DEBUG_SQL_TACOS] - Name: ${product.name}`);
          console.log(`üîç [DEBUG_SQL_TACOS] - Icon: "${product.icon}" (${typeof product.icon})`);
          console.log(`üîç [DEBUG_SQL_TACOS] - All keys:`, Object.keys(product));
        }
      });
      
      // 3. NOUVEAU : V√©rifier si cette cat√©gorie doit utiliser l'affichage unifi√©
      // Charger la config du restaurant si n√©cessaire
      await this.pizzaDisplayService.loadRestaurantConfig(restaurant.id);

      // üö® DEBUG CRITIQUE - Analyser l'affichage unifi√© pizza
      console.log(`üîç [DEBUG_PIZZA_CATEGORY] Cat√©gorie analys√©e: "${category.slug}"`);
      console.log(`üîç [DEBUG_PIZZA_CATEGORY] Nom cat√©gorie: "${category.name}"`);
      const shouldUsePizza = this.pizzaDisplayService.shouldUseUnifiedDisplay(category.slug);
      console.log(`üö® [TRACE_FONCTION_L1594] shouldUseUnifiedDisplay("${category.slug}") = ${shouldUsePizza}`);
      console.log(`üö® [TRACE_FONCTION_L1595] Configuration pizza pour category: ${category.slug}`);
      console.log(`üîç [DEBUG_PIZZA_CATEGORY] Session avant traitement pizza:`, JSON.stringify({
        pizzaOptionsMap: session.sessionData?.pizzaOptionsMap ? 'EXISTS' : 'UNDEFINED',
        totalPizzaOptions: session.sessionData?.totalPizzaOptions,
        selectedCategoryId: session.sessionData?.selectedCategoryId,
        currentCategoryId: session.sessionData?.currentCategoryId
      }));

      if (shouldUsePizza) {
        console.log(`üçï [ShowProducts] Cat√©gorie ${category.slug} utilise l'affichage unifi√©`);
        
        // D√©terminer le type de contexte
        const isMenuCategory = category.slug.includes('menu') || category.name.toLowerCase().includes('menu');
        const context = isMenuCategory ? 'menu_list' : 'category_list';
        
        // Utiliser le service sp√©cialis√© pour l'affichage
        await this.pizzaDisplayService.displayPizzas(
          phoneNumber,
          session,
          context,
          {
            pizzas: isMenuCategory ? undefined : products,
            menus: isMenuCategory ? products : undefined,
            restaurantName: restaurant.name,
            deliveryMode: session.sessionData?.deliveryMode || 'sur_place'
          }
        );
        
        // Mettre √† jour la session pour g√©rer la s√©lection
        
        
        const updatedData = {
          ...session.sessionData,
          currentCategoryId: categoryId,
          currentCategoryName: category.name,
          products: products,
          deliveryMode: session.sessionData?.deliveryMode || 'sur_place'
        };
        
        await this.sessionManager.updateSession(session.id, {
          botState: 'SELECTING_PRODUCTS',
          sessionData: updatedData
        });
        
        return; // Sortir pour √©viter l'affichage classique
      } else {
        // Nettoyer les donn√©es pizza de la session pour les cat√©gories non-pizza
        console.log(`üßπ [CLEANUP] Nettoyage donn√©es pizza pour cat√©gorie: ${category.slug}`);

        const cleanedSessionData = {
          ...session.sessionData,
          pizzaOptionsMap: undefined,
          totalPizzaOptions: undefined,
          menuPizzaWorkflow: undefined
        };

        await this.sessionManager.updateSession(session.id, {
          sessionData: cleanedSessionData
        });
      }

      // 3.2 LOGIQUE EXISTANTE PR√âSERV√âE : Si UN SEUL produit avec variantes, affichage direct
      if (products.length === 1) {
        const product = products[0];
        const hasVariants = (product.france_product_sizes && product.france_product_sizes.length > 0) ||
                          (product.france_product_variants && product.france_product_variants.length > 0);
        
        if (hasVariants) {
          console.log(`üéØ [ShowProducts] Produit unique avec variantes d√©tect√©: ${product.name} - Affichage direct des options`);
          
          // Utiliser le CompositeWorkflowExecutor pour affichage direct
          await this.compositeWorkflowExecutor.showSizeVariantSelection(phoneNumber, session, product, supabase);
          return;
        }
      }
      
      // 4. Logique classique PR√âSERV√âE : Construire la liste des produits  
      const deliveryMode = session.sessionData?.deliveryMode || 'sur_place';
      console.log(`üìç [ShowProducts] Mode de livraison: ${deliveryMode}`);
      console.log(`üìç [ShowProducts] Session compl√®te:`, JSON.stringify(session.sessionData, null, 2));
      
      // Si un seul produit et que le produit a une ic√¥ne, utiliser l'ic√¥ne du produit
      let categoryDisplayIcon = category.icon || 'üçΩÔ∏è';
      if (products.length === 1 && products[0].icon) {
        categoryDisplayIcon = products[0].icon;
        console.log(`üîç [DEBUG_CATEGORY_ICON] Single product with icon detected: ${products[0].name} -> ${products[0].icon}`);
      }

      let menuText = `${categoryDisplayIcon} *${category.name.toUpperCase()}*\n`;
      if (category.description) {
        menuText += `${category.description}\n`;
      }
      menuText += `${deliveryMode === 'livraison' ? 'üöö Prix livraison' : 'üìç Prix sur place'}\n\n`;
      
      const numberEmojis = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£', '6Ô∏è‚É£', '7Ô∏è‚É£', '8Ô∏è‚É£', '9Ô∏è‚É£'];
      const productList: any[] = [];
      
      products.forEach((product: any, index: number) => {
        const displayNumber = index < 9 ? numberEmojis[index] : index === 9 ? 'üîü' : `${index + 1}`;
        
        console.log(`üîç [ShowProducts] Traitement produit ${index + 1}: ${product.name}`);
        console.log(`üîç [ShowProducts] Produit a ${product.france_product_sizes?.length || 0} tailles et ${product.france_product_variants?.length || 0} variantes`);
        
        // D√©terminer les prix selon le mode de livraison choisi
        let priceOnSite = 0;
        let priceDelivery = 0;
        let priceText = '';
        let activePrice = 0;
        
        if (product.france_product_sizes && product.france_product_sizes.length > 0) {
          // Produit avec tailles - GROUPER ET FILTRER par mode de livraison comme dans CompositeWorkflowExecutor
          console.log(`‚úÖ [ShowProducts] ${product.name} a des tailles configur√©es - traitement avec nouvelle logique`);
          console.log(`üìä [ShowProducts] D√©tail tailles:`, JSON.stringify(product.france_product_sizes, null, 2));
          const sizeGroups = new Map();
          
          // Grouper par taille
          product.france_product_sizes.forEach(size => {
            const key = size.size_name;
            if (!sizeGroups.has(key)) {
              sizeGroups.set(key, []);
            }
            sizeGroups.get(key).push(size);
          });
          
          // Extraire les prix selon le mode choisi
          const filteredPrices = [];
          sizeGroups.forEach(sizeList => {
            sizeList.sort((a, b) => a.price_on_site - b.price_on_site);
            
            let selectedSize = sizeList[0];
            if (deliveryMode === 'livraison') {
              filteredPrices.push(selectedSize.price_delivery);
            } else {
              filteredPrices.push(selectedSize.price_on_site);
            }
          });
          
          // Calculer min/max sur les prix filtr√©s
          const minPrice = Math.min(...filteredPrices);
          const maxPrice = Math.max(...filteredPrices);
          
          console.log(`üí∞ [ShowProducts] Prix calcul√©s pour ${product.name}:`, { minPrice, maxPrice, deliveryMode, filteredPrices });

          priceText = minPrice === maxPrice ? this.formatPrice(minPrice) : `${this.formatPrice(minPrice)} - ${this.formatPrice(maxPrice)}`;
          activePrice = minPrice;

          // R√©cup√©rer les vrais prix depuis la premi√®re taille (pas les prix filtr√©s)
          const firstSize = product.france_product_sizes[0];
          priceOnSite = firstSize.price_on_site;
          priceDelivery = firstSize.price_delivery;
        } else if (product.france_product_variants && product.france_product_variants.length > 0) {
          // Produit avec variantes - extraire les prix selon le mode choisi
          const variants = product.france_product_variants.filter((v: any) => v.is_active);
          if (variants.length > 0) {
            const prices = variants.map(variant => {
              if (deliveryMode === 'livraison') {
                return variant.price_delivery || variant.price_on_site + 1;
              } else {
                return variant.price_on_site;
              }
            });
            
            const minPrice = Math.min(...prices);
            const maxPrice = Math.max(...prices);

            priceText = minPrice === maxPrice ? this.formatPrice(minPrice) : `${this.formatPrice(minPrice)} - ${this.formatPrice(maxPrice)}`;
            activePrice = minPrice;
            priceOnSite = minPrice; // Approximation pour le stockage
            priceDelivery = minPrice;
          }
        } else if (product.base_price) {
          // Produit simple avec prix de base - AFFICHER UNIQUEMENT le prix du mode
          console.log(`üì¶ [ShowProducts] ${product.name} utilise base_price: ${product.base_price}‚Ç¨`);
          priceOnSite = product.base_price;
          priceDelivery = product.base_price + 1;
          activePrice = deliveryMode === 'livraison' ? priceDelivery : priceOnSite;
          priceText = this.formatPrice(activePrice);
        } else if (product.price_on_site_base) {
          // Produit avec prix sur place/livraison s√©par√©s - AFFICHER UNIQUEMENT le prix du mode
          console.log(`üì¶ [ShowProducts] ${product.name} utilise price_on_site_base: ${product.price_on_site_base}‚Ç¨ / delivery: ${product.price_delivery_base}‚Ç¨`);
          priceOnSite = product.price_on_site_base;
          priceDelivery = product.price_delivery_base || product.price_on_site_base + 1;
          activePrice = deliveryMode === 'livraison' ? priceDelivery : priceOnSite;
          priceText = this.formatPrice(activePrice);
        } else {
          console.log(`‚ùå [ShowProducts] ${product.name} n'a AUCUN prix configur√©! Donn√©es produit:`, JSON.stringify(product, null, 2));
        }
        
        console.log(`üí∞ [ShowProducts] ${product.name}: sur place ${priceOnSite}‚Ç¨, livraison ${priceDelivery}‚Ç¨, mode ${deliveryMode}, prix actif ${activePrice}‚Ç¨`);
        
        // Utilisation du nouveau format avec s√©parateurs
        menuText += this.formatProductWithSeparators(product, index, category.icon, activePrice);
        
        // Stocker le produit pour la session
        productList.push({
          id: product.id,
          name: product.name,
          price: activePrice, // Prix actif selon le mode de livraison
          priceOnSite: priceOnSite,
          priceDelivery: priceDelivery,
          type: product.product_type,
          workflow_type: product.workflow_type,
          requires_steps: product.requires_steps,
          sizes: product.france_product_sizes || [],
          variants: product.france_product_variants || []
        });
      });
      
      menuText += '\nüí° Tapez le num√©ro du produit souhait√©';
      menuText += '\nüìù Ex: 1 pour 1 produit, 1,1 pour 2 fois le m√™me produit';
      menuText += '\n‚Ü©Ô∏è Tapez 0 pour revenir au menu principal';
      
      await this.messageSender.sendMessage(phoneNumber, menuText);
      
      // 4. Mettre √† jour la session avec les produits et l'√©tat
      console.log('üìù [ShowProducts] Mise √† jour session avec produits');
      
      
      
      const updatedData = {
        ...session.sessionData,
        currentCategoryId: categoryId,
        currentCategoryName: category.name,
        products: productList,
        deliveryMode: deliveryMode
      };
      
      await this.sessionManager.updateSession(session.id, {
        botState: 'SELECTING_PRODUCTS',
        sessionData: updatedData
      });
      
      console.log('‚úÖ [ShowProducts] Produits affich√©s et session mise √† jour');
      
    } catch (error) {
      console.error('‚ùå [ShowProducts] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber, 
        '‚ùå Erreur lors du chargement des produits. Veuillez r√©essayer.');
    }
  }
  
  /**
   * G√©rer les actions apr√®s ajout au panier (99=Commander, 00=Panier, 0=Continuer)
   */
  private async handleCartActions(phoneNumber: string, session: any, message: string): Promise<void> {
    const choice = message.trim();
    
    switch (choice) {
      case '99': // Passer commande
        // V√©rifier si panier non vide
        if (!session.sessionData?.cart || Object.keys(session.sessionData.cart).length === 0) {
          await this.messageSender.sendMessage(phoneNumber, 
            'üõí Votre panier est vide.\nAjoutez des produits avant de commander.');
          return;
        }
        await this.handleOrderCreation(phoneNumber, session);
        break;
        
      case '00': // Vider panier
        await this.sessionManager.updateSession(phoneNumber, {
          botState: session.botState,
          sessionData: (() => {
            return {
              ...session.sessionData,
              cart: [],
              totalPrice: 0
            };
          })()
        });
        await this.messageSender.sendMessage(phoneNumber,
          'üóëÔ∏è Panier vid√© avec succ√®s !'
        );
        
        // Afficher les cat√©gories apr√®s vidage
        const supabase = await this.getSupabaseClient();

        const { data: restaurant } = await supabase
          .from('france_restaurants')
          .select('*')
          .eq('id', session.restaurantId)
          .single();
        
        if (restaurant) {
          const deliveryMode = session.sessionData?.deliveryMode || 'sur_place';
          await this.showMenuAfterDeliveryModeChoice(phoneNumber, restaurant, deliveryMode);
        }
        
        // ‚úÖ APR√àS vidage et affichage menu, mettre √† jour √©tat vers VIEWING_MENU pour permettre navigation
        await this.sessionManager.updateSession(session.id, {
          botState: 'VIEWING_MENU'
        });
        console.log('‚úÖ [CartActions] √âtat mis √† jour vers VIEWING_MENU apr√®s vidage panier "00"');
        break;
        
      case '0': // Ajouter d'autres produits
        const categoryId = session.sessionData?.selectedCategoryId;
        if (categoryId) {
          await this.showCategoryProducts(phoneNumber, session, categoryId);
        } else {
          // R√©cup√©rer les donn√©es restaurant
          const supabase = await this.getSupabaseClient();
          const { data: restaurant } = await supabase
            .from('france_restaurants')
            .select('*')
            .eq('id', session.restaurantId)
            .single();
          
          if (restaurant) {
            const deliveryMode = session.sessionData?.deliveryMode || 'sur_place';
            await this.showMenuAfterDeliveryModeChoice(phoneNumber, restaurant, deliveryMode);
          }
        }
        
        // ‚úÖ APR√àS affichage, mettre √† jour √©tat vers VIEWING_MENU pour permettre navigation
        await this.sessionManager.updateSession(session.id, {
          botState: 'VIEWING_MENU'
        });
        console.log('‚úÖ [CartActions] √âtat mis √† jour vers VIEWING_MENU apr√®s action "0"');
        break;
        
      default:
        await this.messageSender.sendMessage(phoneNumber,
          '‚ùå Choix invalide.\n\n*ACTIONS RAPIDES:*\n‚ö° 99 = Passer commande\nüóëÔ∏è 00 = Vider panier\nüçï 0  = Ajouter d\'autres produits'
        );
        // Garder le m√™me √©tat pour r√©essayer
        break;
    }
  }

  /**
   * G√©rer la cr√©ation de commande - Workflow complet
   * Suit l'architecture de l'ancien bot avec les principes universels
   */
  private async handleOrderCreation(phoneNumber: string, session: any): Promise<void> {
    try {
      console.log(`üì¶ [OrderCreation] D√©but cr√©ation commande pour: ${phoneNumber}`);
      
      const cart = session.sessionData?.cart || {};
      // CONVERSION S√âCURIS√âE : Si c'est un objet, convertir en array. Si d√©j√† array, garder tel quel
      const cartArray = Array.isArray(cart) ? cart : Object.values(cart);
      const restaurantId = session.sessionData?.selectedRestaurantId || session.restaurantId;
      const deliveryMode = session.sessionData?.deliveryMode;


      if (!cartArray || cartArray.length === 0) {
        await this.messageSender.sendMessage(phoneNumber, '‚ùå Votre panier est vide. Ajoutez des produits avant de commander.');
        return;
      }
      
      if (!restaurantId) {
        console.error(`‚ùå RESTAURANT NON S√âLECTIONN√â - restaurantId: ${restaurantId}`);
        console.error(`‚ùå Alternative session.restaurant_id: ${session.restaurant_id}`);
        await this.messageSender.sendMessage(phoneNumber, '‚ùå Restaurant non s√©lectionn√©. Recommencez votre commande.');
        await this.deleteSession(phoneNumber);
        return;
      }

      if (!deliveryMode) {
        await this.messageSender.sendMessage(phoneNumber, '‚ùå Mode de livraison non s√©lectionn√©. Recommencez votre commande.');
        await this.deleteSession(phoneNumber);
        return;
      }

      // Diriger vers le workflow appropri√© selon le mode d√©j√† s√©lectionn√©
      if (deliveryMode === 'livraison') {
        await this.handleDeliveryAddressWorkflow(phoneNumber, session);
      } else {
        // Sur place ou √† emporter - directement vers cr√©ation commande
        await this.processOrderWithMode(phoneNumber, session, deliveryMode);
      }
      
    } catch (error) {
      console.error('‚ùå [OrderCreation] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur lors de la cr√©ation de commande. Veuillez r√©essayer.');
    }
  }

  /**
   * Demander le mode de livraison
   */
  private async askForDeliveryMode(phoneNumber: string, session: any): Promise<void> {
    const message = `üöö *CHOISISSEZ LE MODE DE SERVICE :*\n\n` +
                   `üìç *1* - Sur place\n` +
                   `üì¶ *2* - √Ä emporter\n` +
                   `üöö *3* - Livraison\n\n` +
                   `*Tapez votre choix (1, 2 ou 3)*`;

    await this.messageSender.sendMessage(phoneNumber, message);
    await this.sessionManager.updateSession(session.id, { 
      botState: 'AWAITING_DELIVERY_MODE_CHOICE',
      sessionData: session.sessionData
    });
  }

  /**
   * G√©rer le choix du mode de livraison
   */
  private async handleDeliveryModeSelection(phoneNumber: string, session: any, message: string): Promise<void> {
    const choice = parseInt(message.trim());
    let deliveryMode = '';
    
    switch (choice) {
      case 1:
        deliveryMode = 'sur_place';
        await this.processOrderWithMode(phoneNumber, session, deliveryMode);
        break;
      case 2:
        deliveryMode = 'a_emporter';
        await this.processOrderWithMode(phoneNumber, session, deliveryMode);
        break;
      case 3:
        deliveryMode = 'livraison';
        await this.handleDeliveryAddressWorkflow(phoneNumber, session);
        break;
      default:
        await this.messageSender.sendMessage(phoneNumber, '‚ùå Choix invalide. Tapez 1, 2 ou 3.');
        return;
    }
  }

  /**
   * G√©rer le workflow d'adresse pour la livraison
   */
  private async handleDeliveryAddressWorkflow(phoneNumber: string, session: any): Promise<void> {
    console.log(`üìç [AddressWorkflow] D√©but pour: ${phoneNumber}`);

    const restaurantId = session.sessionData?.selectedRestaurantId || session.restaurantId;
    const cleanPhone = phoneNumber.replace('@c.us', '');

    // R√©cup√©rer config resto
    const deliveryAddressMode = await this.addressService.getDeliveryAddressMode(restaurantId);
    console.log(`üîß [AddressWorkflow] Mode de collecte: ${deliveryAddressMode}`);

    // R√©cup√©rer adresses existantes (GPS OU Texte selon config)
    const existingAddresses = await this.addressService.getCustomerAddresses(cleanPhone);
    console.log(`üìç [AddressWorkflow] ${existingAddresses.length} adresses trouv√©es`);

    if (existingAddresses.length > 0) {
      // ‚úÖ Client a des adresses ‚Üí Afficher liste avec format moderne
      let message = `üìç Vos adresses enregistr√©es :\n\n`;

      existingAddresses.forEach((addr, index) => {
        // S√©parateur visuel
        message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;

        // Emoji num√©rot√©
        const numberEmoji = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£'][index] || `${index + 1}Ô∏è‚É£`;

        // Emoji selon le type d'adresse
        let typeEmoji = 'üè†';
        if (addr.address_label.toLowerCase().includes('bureau')) {
          typeEmoji = 'üè¢';
        }

        // Nom en majuscules avec badge favori
        const labelUpper = addr.address_label.toUpperCase();
        const favoriteTag = addr.is_default ? ' ‚≠ê FAVORI' : '';
        message += `${numberEmoji} ${typeEmoji} ${labelUpper}${favoriteTag}\n`;

        // Parser l'adresse pour s√©parer rue et ville/code postal
        const addressParts = addr.full_address.split(',');
        if (addressParts.length >= 2) {
          const street = addressParts[0].trim();
          const cityPostal = addressParts.slice(1).join(',').trim();
          message += `üìç ${street}\n`;
          message += `üìÆ ${cityPostal}\n\n`;
        } else {
          // Fallback si format non standard
          message += `üìç ${addr.full_address}\n\n`;
        }
      });

      const nextNum = existingAddresses.length + 1;
      const nextNumberEmoji = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£'][nextNum - 1] || `${nextNum}Ô∏è‚É£`;
      message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;

      // Option selon config resto
      if (deliveryAddressMode === 'geolocation') {
        message += `${nextNumberEmoji} üìç Partager ma position\n\n`;
      } else {
        message += `${nextNumberEmoji} ‚ûï Nouvelle adresse\n\n`;
      }

      message += `üí° Tapez le num√©ro de votre choix`;

      await this.messageSender.sendMessage(phoneNumber, message);

      await this.sessionManager.updateSession(session.id, {
        botState: 'AWAITING_ADDRESS_CHOICE',
        sessionData: {
          ...session.sessionData,
          existingAddresses: existingAddresses,
          showGpsOption: deliveryAddressMode === 'geolocation'
        }
      });

    } else {
      // ‚úÖ Premi√®re adresse
      if (deliveryAddressMode === 'geolocation') {
        await this.messageSender.sendMessage(phoneNumber,
          'üìç *Premi√®re livraison !*\n\nüìç *ENVOYEZ VOTRE POSITION GPS*\n\nüîπ Cliquez üìé ‚Üí Localisation\nüîπ Attendez 10s (stabilisation)\nüîπ V√©rifiez pr√©cision ‚â§ 50m\nüîπ "Envoyer localisation actuelle"\n\n‚ùå √âvitez: Position en direct / Lieux sugg√©r√©s'
        );

        await this.sessionManager.updateSession(session.id, {
          botState: 'AWAITING_GPS_LOCATION',
          sessionData: session.sessionData
        });
      } else {
        await this.messageSender.sendMessage(phoneNumber,
          'üìç *Premi√®re livraison !*\n\nüìù *Saisissez votre adresse compl√®te*\n\nüí° *Exemple : 15 rue de la Paix, 75001 Paris*'
        );

        await this.sessionManager.updateSession(session.id, {
          botState: 'AWAITING_NEW_ADDRESS',
          sessionData: session.sessionData
        });
      }
    }
  }

  /**
   * Traiter la commande avec le mode s√©lectionn√©
   * SOLID - D√©l√©gue la logique m√©tier au service d√©di√©
   */
  private async processOrderWithMode(phoneNumber: string, session: any, deliveryMode: string): Promise<void> {
    try {
      const cart = session.sessionData?.cart || {};
      // CONVERSION S√âCURIS√âE : Si c'est un objet, convertir en array. Si d√©j√† array, garder tel quel
      const cartArray = Array.isArray(cart) ? cart : Object.values(cart);
      // CORRECTION: M√™me logique de fallback que pour les commandes
      const restaurantId = session.sessionData?.selectedRestaurantId || session.restaurantId;

      // D√©l√©guer la cr√©ation au service d√©di√©
      const order = await this.orderService.createOrderWorkflow(
        phoneNumber,
        cartArray,  // Passer l'array converti
        restaurantId,
        deliveryMode
      );
      
      // R√©cup√©rer le nom du restaurant pour le message
      const restaurantName = await this.getRestaurantName(restaurantId);
      
      // Envoyer la confirmation
      const confirmationMessage = this.orderService.buildOrderConfirmationMessage(
        order,
        restaurantName,
        deliveryMode,
        null,
        this.restaurantConfig?.currency || 'EUR'
      );

      await this.messageSender.sendMessage(phoneNumber, confirmationMessage);

      // Notification au restaurant
      await this.sendRestaurantNotification(order, session.restaurantId, phoneNumber);

      // Supprimer l'ancienne session AVANT de cr√©er la nouvelle
      await this.deleteSession(phoneNumber);

      // Cr√©er session pour notes post-commande
      await this.createPostOrderNotesSession(phoneNumber, order, session.restaurantId);
      
    } catch (error) {
      console.error('‚ùå [ProcessOrder] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur lors de la cr√©ation de commande. Veuillez r√©essayer.');
    }
  }

  /**
   * G√©rer le choix d'adresse existante
   */
  private async handleAddressChoice(phoneNumber: string, session: any, message: string): Promise<void> {
    try {
      const choice = parseInt(message.trim());
      const text = message.trim();
      const existingAddresses = session.sessionData?.existingAddresses || [];
      const showGpsOption = session.sessionData?.showGpsOption || false;

      // ‚úÖ Choix adresse existante
      if (choice >= 1 && choice <= existingAddresses.length) {
        const selectedAddress = existingAddresses[choice - 1];
        console.log(`üìç [AddressChoice] Adresse s√©lectionn√©e: ${selectedAddress.address_label}`);

        // Mettre √† jour derni√®re utilis√©e = d√©faut
        await this.updateDefaultAddress(phoneNumber, selectedAddress.id);

        // Traiter la commande avec cette adresse
        await this.processOrderWithAddress(phoneNumber, session, selectedAddress);
        return;
      }

      // ‚úÖ Partage position (SI option disponible en mode geolocation)
      if (showGpsOption && choice === existingAddresses.length + 1) {
        await this.messageSender.sendMessage(phoneNumber,
          'üìç *ENVOYEZ VOTRE POSITION GPS*\n\nüîπ Cliquez üìé ‚Üí Localisation\nüîπ Attendez 10s (stabilisation)\nüîπ V√©rifiez pr√©cision ‚â§ 50m\nüîπ "Envoyer localisation actuelle"\n\n‚ùå √âvitez: Position en direct / Lieux sugg√©r√©s'
        );

        await this.sessionManager.updateSession(session.id, {
          botState: 'AWAITING_GPS_LOCATION',
          sessionData: session.sessionData
        });
        return;
      }

      // ‚úÖ Nouvelle adresse (SI option disponible en mode address)
      if (!showGpsOption && choice === existingAddresses.length + 1) {
        await this.messageSender.sendMessage(phoneNumber,
          'üìù *Saisissez votre nouvelle adresse compl√®te*\n\nüí° *Exemple : 15 rue de la Paix, 75001 Paris*'
        );

        await this.sessionManager.updateSession(session.id, {
          botState: 'AWAITING_NEW_ADDRESS',
          sessionData: session.sessionData
        });
        return;
      }

      // ‚úÖ Saisie directe adresse (texte libre - non num√©rique)
      if (isNaN(choice) && text.length >= 10) {
        // R√©utiliser le workflow existant
        await this.handleNewAddressInput(phoneNumber, session, text);
        return;
      }

      // Choix invalide - Toujours +1 pour la derni√®re option (GPS ou Nouvelle adresse)
      const maxChoice = existingAddresses.length + 1;
      await this.messageSender.sendMessage(phoneNumber,
        `‚ùå Choix invalide. Tapez un num√©ro entre 1 et ${maxChoice}\nOu tapez votre adresse directement`
      );

    } catch (error) {
      console.error('‚ùå [AddressChoice] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur lors du choix d\'adresse. Veuillez r√©essayer.');
    }
  }

  /**
   * G√©rer la saisie d'une nouvelle adresse
   */
  private async handleNewAddressInput(phoneNumber: string, session: any, message: string): Promise<void> {
    try {
      const addressText = message.trim();

      // NOUVEAU: Gestion code "99" pour voir les adresses enregistr√©es
      if (addressText === '99') {
        await this.handleAddressListRequest(phoneNumber, session);
        return;
      }

      if (addressText.length < 10) {
        await this.messageSender.sendMessage(phoneNumber, '‚ùå Adresse trop courte. Veuillez saisir une adresse compl√®te.');
        return;
      }
      
      console.log(`üîç [NewAddress] Validation adresse: "${addressText}"`);
      
      // Valider avec Google Places
      const validation = await this.googlePlacesService.validateAddress(addressText);
      
      if (!validation.isValid || validation.suggestions.length === 0) {
        await this.messageSender.sendMessage(phoneNumber, 
          '‚ùå Adresse non trouv√©e. V√©rifiez l\'orthographe et r√©essayez.\n\nüí° Incluez le code postal et la ville.'
        );
        return;
      }
      
      // Proposer les suggestions
      if (validation.suggestions.length === 1) {
        // Une seule suggestion, proposer directement
        const suggestion = validation.suggestions[0];
        const message = `üìç *Adresse trouv√©e :*\n\n` +
                       `${this.googlePlacesService.formatAddressForWhatsApp(suggestion)}\n\n` +
                       `‚úÖ *1* - Confirmer cette adresse\n` +
                       `üìù *2* - Saisir une autre adresse`;
        
        await this.messageSender.sendMessage(phoneNumber, message);
        
        await this.sessionManager.updateSession(session.id, {
          botState: 'AWAITING_ADDRESS_CONFIRMATION',
          sessionData: {
            ...session.sessionData,
            pendingAddress: suggestion
          }
        });
      } else {
        // Plusieurs suggestions
        const message = this.googlePlacesService.formatAddressSuggestionsMessage(validation.suggestions);
        await this.messageSender.sendMessage(phoneNumber, message);
        
        await this.sessionManager.updateSession(session.id, {
          botState: 'AWAITING_ADDRESS_CONFIRMATION',
          sessionData: {
            ...session.sessionData,
            addressSuggestions: validation.suggestions
          }
        });
      }
      
    } catch (error) {
      console.error('‚ùå [NewAddress] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur lors de la validation de l\'adresse. Veuillez r√©essayer.');
    }
  }

  /**
   * G√©rer la confirmation d'adresse
   */
  private async handleAddressConfirmation(phoneNumber: string, session: any, message: string): Promise<void> {
    try {
      const choice = parseInt(message.trim());
      
      // Si une seule adresse en attente
      if (session.sessionData?.pendingAddress) {
        if (choice === 1) {
          // Confirmer l'adresse
          const address = session.sessionData.pendingAddress;
          await this.saveNewAddressAndProcess(phoneNumber, session, address);
        } else if (choice === 2) {
          // Saisir une autre adresse
          await this.messageSender.sendMessage(phoneNumber, 
            'üìù *Saisissez votre adresse compl√®te*'
          );
          
          await this.sessionManager.updateSession(session.id, {
            botState: 'AWAITING_NEW_ADDRESS',
            sessionData: {
              ...session.sessionData,
              pendingAddress: undefined
            }
          });
        } else {
          await this.messageSender.sendMessage(phoneNumber, '‚ùå Tapez 1 pour confirmer ou 2 pour saisir une autre adresse.');
        }
        return;
      }
      
      // Plusieurs suggestions
      const suggestions = session.sessionData?.addressSuggestions || [];
      if (choice >= 1 && choice <= suggestions.length) {
        const selectedAddress = suggestions[choice - 1];
        await this.saveNewAddressAndProcess(phoneNumber, session, selectedAddress);
      } else {
        await this.messageSender.sendMessage(phoneNumber, `‚ùå Choix invalide. Tapez un num√©ro entre 1 et ${suggestions.length}.`);
      }
      
    } catch (error) {
      console.error('‚ùå [AddressConfirmation] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur lors de la confirmation. Veuillez r√©essayer.');
    }
  }

  /**
   * Sauvegarder une nouvelle adresse et traiter la commande
   */
  private async saveNewAddressAndProcess(phoneNumber: string, session: any, address: any): Promise<void> {
    try {
      const cleanPhone = phoneNumber.replace('@c.us', '');
      // CORRECTION: M√™me logique de fallback que pour les commandes
      const restaurantId = session.sessionData?.selectedRestaurantId || session.restaurantId;
      
      // NOUVEAU: Validation du rayon de livraison (uniquement pour le mode livraison)
      if (session.sessionData?.selectedServiceMode === 'livraison') {
        console.log('üîç [SaveAddress] === D√âBUT VALIDATION RAYON LIVRAISON ===');
        console.log('üîç [SaveAddress] Mode de service d√©tect√©: LIVRAISON');
        console.log(`üîç [SaveAddress] Restaurant ID: ${restaurantId}`);
        console.log(`üîç [SaveAddress] Session data:`, JSON.stringify(session.sessionData, null, 2));
        console.log(`üîç [SaveAddress] Adresse geometry:`, JSON.stringify(address.geometry, null, 2));
        
        const radiusValidation = await this.deliveryRadiusService.validateAddressInRadius(
          restaurantId,
          address.geometry.location.lat,
          address.geometry.location.lng
        );
        
        console.log(`üîç [SaveAddress] R√©sultat validation:`, JSON.stringify(radiusValidation, null, 2));
        
        if (!radiusValidation.isInRadius) {
          console.log('‚ùå [SaveAddress] ADRESSE HORS ZONE D√âTECT√âE');
          console.log(`‚ùå [SaveAddress] Distance: ${radiusValidation.distanceKm}km > ${radiusValidation.maxRadiusKm}km`);
          
          // Adresse hors zone - Informer le client et proposer alternatives
          const message = `‚ùå **D√©sol√©, cette adresse est hors de notre zone de livraison**\n\n` +
                         `üìç Distance: ${radiusValidation.distanceKm}km\n` +
                         `üöö Zone maximum: ${radiusValidation.maxRadiusKm}km\n\n` +
                         `*Que souhaitez-vous faire ?*\n` +
                         `1Ô∏è‚É£ Essayer une autre adresse\n` +
                         `2Ô∏è‚É£ Commander √† emporter\n\n` +
                         `üí° *Tapez 1 ou 2*`;
          
          console.log(`üì± [SaveAddress] Envoi message hors zone:`, message);
          await this.messageSender.sendMessage(phoneNumber, message);
          
          // Mettre √† jour la session pour g√©rer la r√©ponse
          await this.sessionManager.updateSession(session.id, {
            botState: 'AWAITING_OUT_OF_ZONE_CHOICE',
            sessionData: {
              ...session.sessionData,
              outOfZoneAddress: address,
              radiusValidation: radiusValidation
            }
          });
          
          return; // Arr√™ter le processus jusqu'√† la r√©ponse du client
        }
        
        // Adresse dans la zone - Informer le client
        console.log('‚úÖ [SaveAddress] ADRESSE DANS LA ZONE VALID√âE');
        console.log(`‚úÖ [SaveAddress] Distance: ${radiusValidation.distanceKm}km ‚â§ ${radiusValidation.maxRadiusKm}km`);
        
        if (radiusValidation.distanceKm > 0) {
          const successMessage = `‚úÖ **Adresse valid√©e !**\nüìç Distance: ${radiusValidation.distanceKm}km`;
          console.log(`üì± [SaveAddress] Envoi message succ√®s:`, successMessage);
          await this.messageSender.sendMessage(phoneNumber, successMessage);
        }
        
        console.log('üîç [SaveAddress] === FIN VALIDATION RAYON LIVRAISON ===');
      } else {
        console.log('‚ÑπÔ∏è [SaveAddress] Mode de service NON-LIVRAISON - Validation rayon ignor√©e');
        console.log(`‚ÑπÔ∏è [SaveAddress] Mode actuel: ${session.sessionData?.selectedServiceMode || 'UNDEFINED'}`);
      }
      
      // G√©n√©rer un label automatique
      const existingAddresses = await this.addressService.getCustomerAddresses(cleanPhone);
      const label = this.addressService.generateAddressLabel(existingAddresses);
      
      // Sauvegarder l'adresse
      const savedAddress = await this.addressService.saveAddress({
        phone_number: cleanPhone,
        address_label: label,
        full_address: address.formatted_address,
        google_place_id: address.place_id,
        latitude: address.geometry.location.lat,
        longitude: address.geometry.location.lng,
        is_default: existingAddresses.length === 0,
        address_type: address.place_id ? 'text' : 'geolocation' // NOUVEAU: Type selon source
      });
      
      if (savedAddress) {
        console.log(`‚úÖ [SaveAddress] Adresse sauvegard√©e: ${label}`);
        await this.processOrderWithAddress(phoneNumber, session, savedAddress);
      } else {
        throw new Error('√âchec sauvegarde adresse');
      }
      
    } catch (error) {
      console.error('‚ùå [SaveAddress] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur lors de la sauvegarde. Veuillez r√©essayer.');
    }
  }

  /**
   * Traiter la commande avec une adresse sp√©cifique
   * SOLID - D√©l√©gue la logique m√©tier au service d√©di√©
   */
  private async processOrderWithAddress(phoneNumber: string, session: any, address: any): Promise<void> {
    try {
      const cart = session.sessionData?.cart || {};
      // CONVERSION S√âCURIS√âE : Si c'est un objet, convertir en array. Si d√©j√† array, garder tel quel
      const cartArray = Array.isArray(cart) ? cart : Object.values(cart);
      // CORRECTION: M√™me logique de fallback que pour les commandes
      const restaurantId = session.sessionData?.selectedRestaurantId || session.restaurantId;

      // D√©l√©guer la cr√©ation au service d√©di√©
      const order = await this.orderService.createOrderWorkflow(
        phoneNumber,
        cartArray,  // Passer l'array converti
        restaurantId,
        'livraison',
        address
      );
      
      // R√©cup√©rer le nom du restaurant pour le message
      const restaurantName = await this.getRestaurantName(restaurantId);
      
      // Envoyer la confirmation
      const confirmationMessage = this.orderService.buildOrderConfirmationMessage(
        order,
        restaurantName,
        'livraison',
        address,
        this.restaurantConfig?.currency || 'EUR'
      );

      await this.messageSender.sendMessage(phoneNumber, confirmationMessage);

      // Notification au restaurant
      await this.sendRestaurantNotification(order, restaurantId, phoneNumber);

      // Supprimer l'ancienne session AVANT de cr√©er la nouvelle
      await this.deleteSession(phoneNumber);

      // Cr√©er session pour notes post-commande
      await this.createPostOrderNotesSession(phoneNumber, order, restaurantId);

    } catch (error) {
      console.error('‚ùå [OrderWithAddress] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur lors de la cr√©ation de commande. Veuillez r√©essayer.');
    }
  }

  /**
   * Utilitaire : R√©cup√©rer le nom d'un restaurant
   * SOLID - Single Responsibility : M√©thode utilitaire simple
   */
  private async getRestaurantName(restaurantId: number): Promise<string> {
    try {
      // üîß OPTIMISATION: Utilisation du client unique
      const supabase = await this.getSupabaseClient();
      
      const { data: restaurant } = await supabase
        .from('france_restaurants')
        .select('name')
        .eq('id', restaurantId)
        .single();
      
      return restaurant?.name || 'Restaurant';
    } catch (error) {
      console.error('‚ùå [getRestaurantName] Erreur:', error);
      return 'Restaurant';
    }
  }

  /**
   * Envoyer notification WhatsApp au restaurant
   */
  private async sendRestaurantNotification(
    order: any,
    restaurantId: number,
    customerPhone: string
  ): Promise<void> {
    try {
      console.log(`üîî [RestaurantNotif] Envoi notification resto ID: ${restaurantId}`);

      // R√©cup√©rer le whatsapp_number du restaurant
      const supabase = await this.getSupabaseClient();
      const { data: restaurant } = await supabase
        .from('france_restaurants')
        .select('whatsapp_number')
        .eq('id', restaurantId)
        .single();

      if (!restaurant?.whatsapp_number) {
        console.warn('‚ö†Ô∏è [RestaurantNotif] Pas de whatsapp_number pour le resto');
        return;
      }

      // Construire le message
      const message = this.orderService.buildRestaurantNotificationMessage(
        order,
        customerPhone,
        this.restaurantConfig?.currency || 'EUR'
      );

      // Envoyer la notification
      await this.messageSender.sendMessage(restaurant.whatsapp_number, message);
      console.log(`‚úÖ [RestaurantNotif] Notification envoy√©e au resto`);

    } catch (error) {
      console.error('‚ùå [RestaurantNotif] Erreur:', error);
      // Ne pas bloquer la commande si la notification √©choue
    }
  }

  /**
   * G√©rer les actions apr√®s configuration produit (1=Ajouter, 2=Recommencer, 0=Retour)
   */
  private async handleWorkflowActions(phoneNumber: string, session: any, message: string): Promise<void> {
    const startTime = Date.now();
    
    const choice = message.trim();
    
    switch (choice) {
      case '1': // Ajouter au panier
        await this.handleQuantityInput(phoneNumber, session, '1');
        break;
        
      case '2': // Recommencer
        const selectedProduct = session.sessionData?.selectedProduct;
        if (selectedProduct) {
          // Relancer le workflow pour le m√™me produit
          await this.compositeWorkflowExecutor.startCompositeWorkflow(
            phoneNumber, 
            session, 
            selectedProduct.id, 
            this.supabaseUrl, 
            this.supabaseKey
          );
        }
        break;
        
      case '0': // Retour menu
        const categoryId = session.sessionData?.selectedCategoryId;
        if (categoryId) {
          await this.showCategoryProducts(phoneNumber, session, categoryId);
        } else {
          // R√©cup√©rer les donn√©es restaurant
          const supabase = await this.getSupabaseClient();
          const { data: restaurant } = await supabase
            .from('france_restaurants')
            .select('*')
            .eq('id', session.restaurantId)
            .single();
          
          if (restaurant) {
            const deliveryMode = session.sessionData?.deliveryMode || 'sur_place';
            await this.showMenuAfterDeliveryModeChoice(phoneNumber, restaurant, deliveryMode);
          }
        }
        break;
        
      default:
        await this.messageSender.sendMessage(phoneNumber,
          '‚ùå Choix invalide.\n\n*Que souhaitez-vous faire ?*\n1 Ajouter au panier\n2 Recommencer\n0 Retour menu'
        );
        break;
    }
  }

  /**
   * G√©rer la saisie de quantit√© - ARCHITECTURE UNIVERSELLE
   * SOLID : Single Responsibility - Gestion quantit√© uniquement
   */
  private async handleQuantityInput(phoneNumber: string, session: any, message: string): Promise<void> {
    const startTime = Date.now();
    console.log(`üì¶ [QuantityInput] Message re√ßu: "${message}"`);

    console.log('üîç DEBUG_QUANTITY_INPUT_START: Entr√©e handleQuantityInput');
    console.log('üîç DEBUG_QUANTITY_SESSION:', JSON.stringify(session.sessionData, null, 2));

    const quantity = parseInt(message.trim());
    const selectedProduct = session.sessionData?.selectedProduct;

    console.log('üîç DEBUG_QUANTITY_PRODUCT:', JSON.stringify(selectedProduct, null, 2));
    console.log('üîç DEBUG_QUANTITY_VALUE:', quantity);

    // R√©cup√©rer l'ic√¥ne depuis les products en session si manquante
    if (selectedProduct && !selectedProduct.icon && session.sessionData?.products) {
      const fullProduct = session.sessionData.products.find(p => p.id === selectedProduct.id);
      if (fullProduct?.icon) {
        selectedProduct.icon = fullProduct.icon;
        console.log(`‚úÖ [QuantityInput] Ic√¥ne r√©cup√©r√©e depuis session: ${fullProduct.icon} pour ${selectedProduct.name}`);
      }
    }

    // Traitement quantit√© pour workflow simple


    if (!selectedProduct) {
      console.error('‚ùå [QuantityInput] Pas de produit s√©lectionn√©');
      console.log('üîç DEBUG_QUANTITY_NO_PRODUCT: selectedProduct est null/undefined');
      await this.messageSender.sendMessage(phoneNumber, 
        '‚ùå Erreur de session. Veuillez recommencer votre s√©lection.');
      return;
    }
    
    // Valider la quantit√©
    if (isNaN(quantity) || quantity < 1 || quantity > 99) {
      await this.messageSender.sendMessage(phoneNumber, 
        '‚ùå Quantit√© invalide. Tapez un nombre entre 1 et 99.');
      return;
    }
    
    console.log(`‚úÖ [QuantityInput] Quantit√© valide: ${quantity}`);
    
    // Calculer le prix total
    const basePrice = selectedProduct.price * quantity;


    // Les suppl√©ments sont d√©j√† inclus dans selectedProduct.price (calcul√©s dans CompositeWorkflowExecutor)
    // Pas besoin de recalculer ici pour √©viter le double comptage
    let supplementsPrice = 0;


    const totalPrice = basePrice + supplementsPrice;
    
    // Construire la description du produit pour le panier
    let productDescription = selectedProduct.name;
    
    // Si produit composite, ajouter la configuration
    if (selectedProduct.configuration) {
      const configDetails: string[] = [];
      for (const [group, items] of Object.entries(selectedProduct.configuration)) {
        const itemNames = (items as any[]).map(i => i.option_name).join(', ');
        configDetails.push(itemNames);
      }
      productDescription += ` (${configDetails.join(' - ')})`;
    }
    

    // üîç DEBUG_CART_CONVERSION - Tracer la conversion du panier
    console.log('üîç DEBUG_CART_CONVERSION: Type rawCart:', typeof session.sessionData?.cart);
    console.log('üîç DEBUG_CART_CONVERSION: rawCart contenu:', JSON.stringify(session.sessionData?.cart));
    console.log('üîç DEBUG_CART_CONVERSION: Array.isArray(rawCart):', Array.isArray(session.sessionData?.cart));

    // Ajouter au panier
    const rawCart = session.sessionData?.cart || [];
    const cart = Array.isArray(rawCart)
      ? rawCart
      : (rawCart && typeof rawCart === 'object' ? Object.values(rawCart).map(item => {
          console.log('üîç DEBUG_ITEM_MAPPING: item original:', JSON.stringify(item));
          const mapped = {
            ...item,
            productName: item.productName || item.name,
            unitPrice: item.unitPrice || item.price,
            categoryName: item.categoryName || 'Menu',
            configuration: item.configuration || item.details
          };
          console.log('üîç DEBUG_ITEM_MAPPING: item mapp√©:', JSON.stringify(mapped));
          return mapped;
        }) : []);

    console.log('üîç DEBUG_CART_CONVERSION: cart apr√®s conversion:', JSON.stringify(cart));

    const cartItem = {
      productId: selectedProduct.id,
      productName: selectedProduct.name,
      categoryName: await this.getCategoryNameFromProduct(selectedProduct.id)
                 || session.sessionData?.currentCategoryName
                 || 'ProduitTest',
      productDescription: productDescription,
      quantity: quantity,
      unitPrice: selectedProduct.price,
      totalPrice: totalPrice,
      icon: selectedProduct.icon || null,
      configuration: selectedProduct.configuration || null
    };

    // Dans handleQuantityInput, d√©tecter la multis√©lection
    const multiProducts = session.sessionData?.multiSelectedProducts;
    if (multiProducts && multiProducts.length > 1) {
      // Ajouter TOUS les produits au panier en une fois
      const allCartItems = multiProducts.map(product => ({
        productId: product.id,
        productName: product.name,
        categoryName: session.sessionData?.currentCategoryName,
        productDescription: product.name,
        quantity: 1,
        unitPrice: product.price,
        totalPrice: product.price,
        icon: product.icon || null,
        configuration: null
      }));

      cart.push(...allCartItems);
    } else {
      // Logique existante pour produit unique
      cart.push(cartItem);
    }

    // Nettoyer les donn√©es de multis√©lection apr√®s usage
    delete session.sessionData.multiSelectedProducts;

    // Calculer le total du panier
    const cartTotal = cart.reduce((sum: number, item: any) => sum + item.totalPrice, 0);
    
    // Utiliser le formatter universel pour le message
    const { UniversalCartFormatter } = await import('../services/UniversalCartFormatter.ts');
    const formatter = new UniversalCartFormatter();
    
    // Formater le message avec le nouveau standard universel
    const confirmMessage = formatter.formatAdditionMessage(
      selectedProduct,
      cart,
      quantity,
      this.restaurantConfig?.currency || 'EUR'
    );
    
    await this.messageSender.sendMessage(phoneNumber, confirmMessage);

    
    // Mettre √† jour la session
    const updatedData = {
      ...session.sessionData,
      cart: cart,
      cartTotal: cartTotal,
      selectedProduct: null,
      awaitingQuantity: false,
      awaitingCartActions: true
    };
    
    await this.sessionManager.updateSession(session.id, {
      botState: 'AWAITING_CART_ACTIONS',
      sessionData: updatedData
    });
    
    console.log(`‚úÖ [QuantityInput] Produit ajout√© au panier, √©tat -> CART_OPTIONS`);
  }
  
  /**
   * Cr√©er session pour notes post-commande
   */
  private async createPostOrderNotesSession(phoneNumber: string, order: any, restaurantId: number): Promise<void> {
    try {
      console.log(`üí¨ [PostOrderNotes] Cr√©ation session notes pour commande: ${order.order_number}`);

      await this.sessionManager.createSessionForRestaurant(
        phoneNumber,
        { id: restaurantId },
        'POST_ORDER_NOTES',
        {
          orderId: order.id,
          orderNumber: order.order_number,
          expiresAt: this.getCurrentTime().getTime() + 5*60*1000 // 5 minutes
        }
      );

      // Message pour informer le client
      await this.messageSender.sendMessage(phoneNumber,
        `üí¨ *Besoin d'une pr√©cision ?*
üìù Vous avez *5 minutes* pour envoyer *UN SEUL* message
üí° Exemples : "sans oignons", "bien cuit", "code porte 1234"`
      );

    } catch (error) {
      console.error('‚ùå [PostOrderNotes] Erreur cr√©ation session:', error);
    }
  }

  /**
   * G√©rer l'ajout d'une note post-commande
   */
  private async handlePostOrderNote(phoneNumber: string, session: any, message: string): Promise<void> {
    try {
      const orderId = session.sessionData?.orderId;

      if (!orderId) {
        console.error('‚ùå [PostOrderNote] Pas d\'orderId dans session');
        await this.deleteSession(phoneNumber);
        return;
      }

      // Timestamp avec timezone Paris
      const timestamp = this.getCurrentTime().toLocaleTimeString('fr-FR', {
        hour: '2-digit',
        minute: '2-digit'
      });

      // Sauvegarder note avec horodatage
      const supabase = await this.getSupabaseClient();
      await supabase
        .from('france_orders')
        .update({
          additional_notes: `[${timestamp}] ${message}`,
          updated_at: this.getCurrentTime().toISOString()
        })
        .eq('id', orderId);

      // Confirmer et terminer
      await this.messageSender.sendMessage(phoneNumber,
        `‚úÖ Note ajout√©e √† votre commande #${session.sessionData.orderNumber}\n\n` +
        `üìù "${message}"\n\n` +
        `Merci ! Le restaurant a bien re√ßu votre pr√©cision.`
      );

      // Supprimer session = termin√©
      await this.deleteSession(phoneNumber);

    } catch (error) {
      console.error('‚ùå [PostOrderNote] Erreur:', error);
      await this.deleteSession(phoneNumber);
    }
  }

  /**
   * V√©rifier si le message est un num√©ro de t√©l√©phone (7+ chiffres)
   */
  private isPhoneNumber(message: string): boolean {
    const cleanMessage = message.replace(/[\s\-\(\)\+]/g, '');
    const isNumeric = /^\d+$/.test(cleanMessage);
    return isNumeric && cleanMessage.length >= 7;
  }

  /**
   * Supprimer une session (√©quivalent de SimpleSession.deleteAllForPhone)
   */
  private async deleteSession(phoneNumber: string): Promise<void> {
    try {
      const supabase = await this.getSupabaseClient();

      await supabase
        .from('france_user_sessions')
        .delete()
        .eq('phone_number', phoneNumber);
        
      console.log(`üóëÔ∏è [DeleteSession:2506] Sessions supprim√©es pour: ${phoneNumber}`);
    } catch (error) {
      console.error('‚ùå [DeleteSession:2508] Erreur suppression session:', error);
    }
  }


  /**
   * G√©rer le flux de confirmation d'annulation
   */
  private async handleCancellationConfirmationFlow(phoneNumber: string, session: any, message: string): Promise<void> {
    try {
      console.log(`üîç [CancellationFlow] handleCancellationConfirmationFlow - phoneNumber: ${phoneNumber}`);
      console.log(`üîç [CancellationFlow] message: "${message}"`);
      console.log(`üîç [CancellationFlow] session data:`, JSON.stringify(session, null, 2));
      console.log(`üîç [CancellationFlow] session.sessionData:`, JSON.stringify(session.sessionData, null, 2));
      console.log(`üîç [CancellationFlow] session expires_at:`, session.expiresAt);
      console.log(`üîç [CancellationFlow] current time:`, this.getCurrentTime());
      
      // V√©rifier expiration
      const now = this.getCurrentTime();
      const expiresAt = new Date(session.expiresAt || session.expires_at);
      const isExpired = now > expiresAt;
      console.log(`üîç [CancellationFlow] Session expired?:`, isExpired);
      
      const orderData = {
        orderId: session.sessionData?.pendingCancellationOrderId,
        orderNumber: session.sessionData?.pendingCancellationOrderNumber
      };
      
      console.log(`üîç [CancellationFlow] extracted orderData:`, JSON.stringify(orderData, null, 2));
      
      if (!orderData.orderId) {
        console.log(`‚ùå [CancellationFlow] No orderId found - session expired or data missing`);
        await this.deleteSession(phoneNumber);
        await this.messageSender.sendMessage(phoneNumber, 
          '‚ùå Session expir√©e. Tapez "annuler" pour recommencer.'
        );
        return;
      }
      
      // D√©l√©guer au service d'annulation
      const result = await this.cancellationService.handleCancellationConfirmation(orderData, message);
      
      // Envoyer message r√©sultat
      await this.messageSender.sendMessage(phoneNumber, result.message);
      
      // Le service g√®re le nettoyage de session
      // Nettoyer seulement pour les r√©ponses d√©finitives ou invalides
      if (result.action === 'cancelled' || result.action === 'invalid_response') {
        console.log('üîÑ [UniversalBot:2556] Calling cleanupCancellationSession from main logic');
        await this.cancellationService.cleanupCancellationSession(phoneNumber);
        console.log('üóëÔ∏è [CancellationFlow] Session d\'annulation nettoy√©e apr√®s r√©ponse:', result.action);
      }
      
    } catch (error) {
      console.error('‚ùå [CancellationConfirmationFlow] Erreur:', error);
      console.log('üö® [UniversalBot:2563] Calling cleanupCancellationSession from CATCH block');
      await this.cancellationService.cleanupCancellationSession(phoneNumber);
      await this.messageSender.sendMessage(phoneNumber, 
        '‚ùå Erreur lors de l\'annulation. Veuillez r√©essayer.'
      );
    }
  }

  /**
   * NOUVEAU: G√©rer le partage de g√©olocalisation pour la livraison
   */
  private async handleGeolocationSharing(phoneNumber: string, session: any, message: string): Promise<void> {
    try {
      console.log('üìç [GeolocationSharing] === D√âBUT GESTION G√âOLOCALISATION ===');

      // DEBUG: Afficher le format exact du message re√ßu
      console.log('üîç [GeolocationSharing] DEBUG MESSAGE TYPE:', typeof message);
      console.log('üîç [GeolocationSharing] DEBUG MESSAGE CONTENT:', JSON.stringify(message));
      console.log('üîç [GeolocationSharing] DEBUG MESSAGE STRING:', String(message));

      // V√©rifier si le message contient des coordonn√©es
      // Format Green API: GPS:latitude,longitude
      const locationMatch = message.match(/GPS:([\d.-]+),([\d.-]+)/i);

      if (locationMatch) {
        const latitude = parseFloat(locationMatch[1]);
        const longitude = parseFloat(locationMatch[2]);

        console.log(`‚úÖ [GeolocationSharing] Coordonn√©es re√ßues: ${latitude}, ${longitude}`);

        // Cr√©er la structure d'adresse pour saveNewAddressAndProcess (pas de double sauvegarde)
        const gpsAddress = {
          formatted_address: `Position GPS: ${latitude.toFixed(6)}, ${longitude.toFixed(6)}`,
          place_id: null,
          geometry: {
            location: {
              lat: latitude,
              lng: longitude
            }
          }
        };

        // Mettre √† jour la session avec les coordonn√©es
        await this.sessionManager.updateSession(session.id, {
          sessionData: {
            ...session.sessionData,
            deliveryCoordinates: { latitude, longitude }
          }
        });

        // Suivre le m√™me workflow que la saisie d'adresse normale
        await this.saveNewAddressAndProcess(phoneNumber, session, gpsAddress);

      } else {
        await this.messageSender.sendMessage(phoneNumber,
          '‚ùå Position non re√ßue. Merci de partager votre position ou tapez "annuler".'
        );
      }
    } catch (error) {
      console.error('‚ùå [GeolocationSharing] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber,
        '‚ùå Une erreur est survenue. Veuillez r√©essayer ou contacter le support.'
      );
    }
  }

  /**
   * G√©rer le choix du client quand son adresse est hors de la zone de livraison
   */
  private async handleOutOfZoneChoice(phoneNumber: string, session: any, message: string): Promise<void> {
    try {
      console.log('üîÑ [OutOfZoneChoice] === D√âBUT GESTION CHOIX HORS ZONE ===');
      console.log(`üîÑ [OutOfZoneChoice] Message re√ßu: "${message}"`);
      console.log(`üîÑ [OutOfZoneChoice] Session data:`, JSON.stringify(session.sessionData, null, 2));

      const choice = parseInt(message.trim());
      console.log(`üîÑ [OutOfZoneChoice] Choix pars√©: ${choice} (type: ${typeof choice})`);

      if (choice === 1) {
        console.log('üîÑ [OutOfZoneChoice] CHOIX 1: Essayer une autre adresse');
        // Essayer une autre adresse
        await this.messageSender.sendMessage(phoneNumber, 
          'üìù *Saisissez votre nouvelle adresse compl√®te*\n\nüí° *Exemple : 15 rue de la Paix, 75001 Paris*'
        );
        
        await this.sessionManager.updateSession(session.id, {
          botState: 'AWAITING_NEW_ADDRESS',
          sessionData: {
            ...session.sessionData,
            outOfZoneAddress: undefined,
            radiusValidation: undefined
          }
        });
        
      } else if (choice === 2) {
        console.log('üîÑ [OutOfZoneChoice] CHOIX 2: Commander √† emporter');
        
        // Commander √† emporter
        await this.messageSender.sendMessage(phoneNumber, 
          'üõçÔ∏è *Parfait ! Passons √† l\'emporter*'
        );
        
        // Mettre √† jour le mode de service en emporter
        await this.sessionManager.updateSession(session.id, {
          sessionData: {
            ...session.sessionData,
            selectedServiceMode: 'a_emporter',
            outOfZoneAddress: undefined,
            radiusValidation: undefined
          }
        });
        
        // Traiter directement la commande en emporter
        const cart = session.sessionData?.cart || {};
        // CONVERSION S√âCURIS√âE : Si c'est un objet, convertir en array. Si d√©j√† array, garder tel quel
        const cartArray = Array.isArray(cart) ? cart : Object.values(cart);
        // CORRECTION: M√™me logique de fallback que pour les commandes
        const restaurantId = session.sessionData?.selectedRestaurantId || session.restaurantId;

        const order = await this.orderService.createOrderWorkflow(
          phoneNumber,
          cartArray,  // Passer l'array converti
          restaurantId,
          'a_emporter',
          null // Pas d'adresse pour emporter
        );
        
        const restaurantName = await this.getRestaurantName(restaurantId);
        const confirmationMessage = this.orderService.buildOrderConfirmationMessage(
          order,
          restaurantName,
          'a_emporter',
          null,
          this.restaurantConfig?.currency || 'EUR'
        );

        await this.messageSender.sendMessage(phoneNumber, confirmationMessage);

        // Notification au restaurant
        await this.sendRestaurantNotification(order, restaurantId, phoneNumber);

        await this.deleteSession(phoneNumber);
        
      } else {
        console.log(`üîÑ [OutOfZoneChoice] CHOIX INVALIDE: ${choice}`);
        console.log(`üîÑ [OutOfZoneChoice] Message original: "${message}"`);
        
        // Choix invalide
        await this.messageSender.sendMessage(phoneNumber, 
          '‚ùå R√©ponse invalide.\n\n*Tapez :*\n1Ô∏è‚É£ pour essayer une autre adresse\n2Ô∏è‚É£ pour commander √† emporter'
        );
      }
      
      console.log('üîÑ [OutOfZoneChoice] === FIN GESTION CHOIX HORS ZONE ===');
      
    } catch (error) {
      console.error('‚ùå [OutOfZoneChoice] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur lors du traitement. Veuillez r√©essayer.');
    }
  }
  /**
   * Ajouter une pizza directement au panier (format unifi√©)
   * Pr√©serve la logique existante du panier
   */
  private async addPizzaDirectToCart(phoneNumber: string, session: any, pizzaOption: any): Promise<void> {
    try {
      console.log(`üõí [PizzaDirectCart] Ajout pizza: ${pizzaOption.pizzaName} ${pizzaOption.sizeName}`);
      
      // Construire la description du produit
      const productDescription = `${pizzaOption.pizzaName} - Taille: ${pizzaOption.sizeName}`;
      
      // Ajouter au panier - m√™me logique que le syst√®me existant
      const rawCart = session.sessionData?.cart || [];
      const cart = Array.isArray(rawCart) ? rawCart : [];
      
      cart.push({
        productId: pizzaOption.pizzaId,
        productName: pizzaOption.pizzaName,
        categoryName: 'Pizzas',
        productDescription: productDescription,
        sizeId: pizzaOption.sizeId,
        sizeName: pizzaOption.sizeName,
        unitPrice: pizzaOption.price,
        quantity: 1,
        totalPrice: pizzaOption.price,
        addedAt: this.getCurrentTime().toISOString()
      });
      
      // Calculer le nouveau total
      const currentTotal = session.sessionData?.totalPrice || 0;
      const newTotal = currentTotal + pizzaOption.price;
      
      // Mettre √† jour la session
      const updatedSessionData = {
        ...session.sessionData,
        cart: cart,
        totalPrice: newTotal,
        selectedProduct: null,
        awaitingQuantity: false,
        awaitingCartActions: true
      };

      await this.sessionManager.updateSession(session.id, {
        botState: 'AWAITING_CART_ACTIONS',
        sessionData: updatedSessionData
      });
      
      // Message de confirmation
      await this.messageSender.sendMessage(phoneNumber, 
        `‚úÖ Ajout√© au panier !\nüçï ${pizzaOption.pizzaName} ${pizzaOption.sizeName}\nüí∞ ${this.formatPrice(pizzaOption.price)}\n\n` +
        `üìä Total panier: ${this.formatPrice(newTotal)}\n\n` +
        `*Que souhaitez-vous faire ?*\n` +
        `üóëÔ∏è 00 = Vider panier\n` +
        `‚ö° 99 = Passer commande\n` +
        `üçï 0  = Continuer vos achats`
      );
      
    } catch (error) {
      console.error('‚ùå [PizzaDirectCart] Erreur ajout panier:', error);
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur lors de l\'ajout au panier. Veuillez r√©essayer.');
    }
  }

  /**
   * Formate un produit avec le nouveau style de s√©parateurs et emojis
   */
  private formatProductWithSeparators(
    product: any,
    index: number,
    categoryIcon: string,
    activePrice: number
  ): string {
    let productBlock = '';

    // S√©parateur
    productBlock += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;

    // Nom avec ic√¥nes - PHASE 2: Support ic√¥ne produit avec fallback
    // ANCIEN CODE (comment√© pour rollback si besoin) :
    // const cleanName = product.name.replace(/^[^\s]+\s/, ''); // Enl√®ve emoji existant - PROBLEME: supprime le premier mot

    // NOUVEAU: Logique hi√©rarchique - produit prioritaire, sinon cat√©gorie (pr√©serve comportement existant)
    const displayIcon = product.icon || categoryIcon; // Fallback automatique sur cat√©gorie

    // DEBUG: Tracer les ic√¥nes pour TACOS (console uniquement)
    if (product.name.includes('TACOS')) {
      console.log(`üîç [DEBUG_TACOS_ICON] Product: ${product.name}`);
      console.log(`üîç [DEBUG_TACOS_ICON] product.icon: "${product.icon}" (${typeof product.icon})`);
      console.log(`üîç [DEBUG_TACOS_ICON] categoryIcon: "${categoryIcon}" (${typeof categoryIcon})`);
      console.log(`üîç [DEBUG_TACOS_ICON] displayIcon final: "${displayIcon}" (${typeof displayIcon})`);
      console.log(`üîç [DEBUG_TACOS_ICON] Final display will be: üéØ ${displayIcon} ${displayIcon} ${product.name.toUpperCase()}`);
    }

    productBlock += `${displayIcon} ${product.name.toUpperCase()}\n`;
    
    // Composition si disponible
    if (product.composition) {
      productBlock += `üßæ ${product.composition.toUpperCase()}\n`;
    }
    
    // Prix et action - Utiliser la devise du restaurant
    // Afficher "Prix selon choix" pour les produits workflow avec prix 0
    const priceDisplay = (activePrice === 0 && (product.workflow_type || product.requires_steps))
      ? 'Prix selon choix'
      : this.formatPrice(activePrice);
    productBlock += `üí∞ ${priceDisplay} - Tapez ${index + 1}\n\n`;

    return productBlock;
  }

  // =================================
  // NOUVEAU: HANDLER GLOBAL "RESTO"
  // =================================

  /**
   * Handler principal pour la commande "resto"
   * Nettoie session existante et propose menu d√©couverte restaurants
   */
  async handleRestoCommand(phoneNumber: string): Promise<void> {
    try {
      console.log(`üè™ [RestaurantDiscovery] Commande "resto" re√ßue de: ${phoneNumber}`);

      // ‚úÖ RGPD : V√©rifier le consentement AVANT toute action
      const hasGdprConsent = await this.checkGdprConsent(phoneNumber);

      if (!hasGdprConsent) {
        // Pas de consentement ‚Üí Stocker le contexte en base et afficher l'√©cran
        await this.savePendingWorkflow(phoneNumber, { type: 'resto' });
        await this.showGdprConsentScreen(phoneNumber);
        return; // Arr√™ter le traitement
      }

      // ‚úÖ Consentement valid√© ‚Üí Continuer le workflow normal
      // 1. Nettoyer session existante (m√™me logique qu'annuler)
      await this.deleteSession(phoneNumber);

      // 2. Cr√©er session pour s√©lection de restaurant
      await this.createRestaurantDiscoverySession(phoneNumber);

      // 3. Envoyer menu de choix
      const message = `üè™ **CHOISIR UN RESTAURANT**

üìã **1** - Voir tous les restaurants
üìç **2** - Restaurants pr√®s de moi

üí° Tapez votre choix (**1** ou **2**)`;

      await this.messageSender.sendMessage(phoneNumber, message);

    } catch (error) {
      console.error('‚ùå [RestaurantDiscovery] Erreur handleRestoCommand:', error);
      await this.messageSender.sendMessage(phoneNumber,
        '‚ùå Erreur lors de l\'acc√®s aux restaurants. Veuillez r√©essayer.');
    }
  }

  /**
   * üß™ TEST - V√©rification timezone et horaires pour restaurant Guin√©e
   * COMMENT√â - Test valid√© le 2025-10-08
   * R√©sultats : ‚úÖ UTC correctement g√©r√©, conversions timezone OK pour Paris et Guin√©e
   */
  /* async handleTestHoraireCommand(phoneNumber: string): Promise<void> {
    try {
      const supabase = await this.getSupabaseClient();

      // R√©cup√©rer un restaurant PARIS
      const { data: restoParis, error: errorParis } = await supabase
        .from('france_restaurants')
        .select('*')
        .eq('timezone', 'Europe/Paris')
        .eq('is_active', true)
        .limit(1)
        .single();

      // R√©cup√©rer un restaurant GUIN√âE
      const { data: restoGuinee, error: errorGuinee } = await supabase
        .from('france_restaurants')
        .select('*')
        .eq('timezone', 'Africa/Conakry')
        .eq('is_active', true)
        .limit(1)
        .single();

      if ((errorParis && errorGuinee) || (!restoParis && !restoGuinee)) {
        await this.messageSender.sendMessage(phoneNumber,
          '‚ùå Aucun restaurant trouv√© pour le test');
        return;
      }

      const restaurant = restoParis || restoGuinee;

      // Heure UTC actuelle du serveur
      const nowUTC = new Date();
      const utcString = nowUTC.toISOString();

      // Heure convertie Paris
      const timeInParis = nowUTC.toLocaleString('fr-FR', {
        timeZone: 'Europe/Paris',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false
      });

      // Heure convertie Guin√©e
      const timeInGuinea = nowUTC.toLocaleString('fr-FR', {
        timeZone: 'Africa/Conakry',
        year: 'numeric',
        month: '2-digit',
        day: '2-digit',
        hour: '2-digit',
        minute: '2-digit',
        second: '2-digit',
        hour12: false
      });

      // Heure actuelle calcul√©e par le service (comme pour v√©rification)
      const currentTime = nowUTC.toLocaleTimeString('fr-FR', {
        timeZone: restaurant.timezone,
        hour: '2-digit',
        minute: '2-digit',
        hour12: false
      });

      // Jour actuel en fran√ßais
      const days = ['dimanche', 'lundi', 'mardi', 'mercredi', 'jeudi', 'vendredi', 'samedi'];
      const localeDateString = nowUTC.toLocaleDateString('en-US', {
        timeZone: restaurant.timezone,
        weekday: 'short'
      });
      const dayMap: { [key: string]: number } = {
        'Sun': 0, 'Mon': 1, 'Tue': 2, 'Wed': 3,
        'Thu': 4, 'Fri': 5, 'Sat': 6
      };
      const dayIndex = dayMap[localeDateString.split(',')[0]] || 0;
      const currentDay = days[dayIndex];

      // Horaires du jour
      const businessHours = restaurant.business_hours || {};
      const todaySchedule = businessHours[currentDay];

      // V√©rification avec le service
      const scheduleResult = this.scheduleService.checkRestaurantSchedule(restaurant);

      // Construction du message de test
      const message = `üß™ **TEST HORAIRE - ${restaurant.name}**

üìç **Timezone**: ${restaurant.timezone}

‚è∞ **Heure UTC serveur**:
${utcString}

üá´üá∑ **Heure Paris** (Europe/Paris):
${timeInParis}

üá¨üá≥ **Heure Guin√©e** (Africa/Conakry):
${timeInGuinea}

üéØ **Restaurant test√©**:
üïê **Heure actuelle** (calcul√©e): ${currentTime}
üìÖ **Jour actuel**: ${currentDay}

üìã **Horaires aujourd'hui**:
${todaySchedule ? `${todaySchedule.isOpen ? '‚úÖ Ouvert' : '‚ùå Ferm√©'} ${todaySchedule.opening || ''} - ${todaySchedule.closing || ''}` : '‚ùå Pas d\'horaire configur√©'}

üéØ **R√©sultat v√©rification**:
${scheduleResult.isOpen ? '‚úÖ RESTAURANT OUVERT' : 'üî¥ RESTAURANT FERM√â'}
Statut: ${scheduleResult.status}
${scheduleResult.message || ''}
${scheduleResult.nextOpenTime ? `Prochaine ouverture: ${scheduleResult.nextOpenTime}` : ''}`;

      await this.messageSender.sendMessage(phoneNumber, message);

    } catch (error) {
      console.error('‚ùå [TestHoraire] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber,
        '‚ùå Erreur lors du test horaire');
    }
  } */

  /**
   * Cr√©er session temporaire pour d√©couverte restaurants
   * PATTERN CHOOSING_DELIVERY_MODE (acc√®s direct comme ligne 843)
   */
  private async createRestaurantDiscoverySession(phoneNumber: string): Promise<void> {
    try {
      // 1. Supprimer session existante
      await this.sessionManager.deleteSessionsByPhone(phoneNumber);
      
      // 2. Cr√©er nouvelle session avec l'√©tat CHOOSING_RESTAURANT_MODE (pattern ligne 843)
      const now = this.getCurrentTime();
      const expiresAt = new Date(now.getTime() + 30 * 60 * 1000); // 30 minutes pour discovery depuis heure Paris
      
      const supabase = await this.getSupabaseClient();

      const { data: newSession, error } = await supabase
        .from('france_user_sessions')
        .insert({
          phone_number: phoneNumber,
          chat_id: phoneNumber,
          restaurant_id: null, // Pas de restaurant sp√©cifique pour discovery
          current_step: 'CHOOSING_RESTAURANT_MODE',
          bot_state: 'CHOOSING_RESTAURANT_MODE',
          session_data: JSON.stringify({
            discoveryMode: true,
            step: 'choosing_mode'
          }),
          cart_items: JSON.stringify([]),
          total_amount: 0,
          expires_at: expiresAt,
          workflow_data: JSON.stringify({})
        })
        .select()
        .single();

      if (error) {
        throw error;
      }
        
      console.log(`‚úÖ [RestaurantDiscovery] Session discovery cr√©√©e pour: ${phoneNumber}`);
    } catch (error) {
      console.error('‚ùå [RestaurantDiscovery] Erreur cr√©ation session:', error);
      throw error;
    }
  }

  /**
   * G√©rer choix mode de s√©lection restaurant (1=liste, 2=g√©o)
   */
  async handleRestaurantModeSelection(phoneNumber: string, session: any, message: string): Promise<void> {
    try {
      const choice = message.trim();
      console.log(`üè™ [RestaurantDiscovery] Mode choisi: ${choice}`);
      
      if (choice === '1') {
        // Mode liste compl√®te
        await this.showAllRestaurants(phoneNumber);
      } else if (choice === '2') {
        // Fonctionnalit√© temporairement indisponible
        await this.messageSender.sendMessage(phoneNumber, 
          `üìç **G√âOLOCALISATION - BIENT√îT DISPONIBLE**

üöß Cette fonctionnalit√© arrive prochainement !

En attendant, consultez tous nos restaurants :

üìã **1** - Voir tous les restaurants

üí° Tapez **1** pour continuer`);
        
        // Garder l'utilisateur dans l'√©tape de s√©lection
        return;
      } else {
        // Choix invalide
        await this.messageSender.sendMessage(phoneNumber, 
          `‚ùå **Choix invalide**

Tapez :
üìã **1** pour tous les restaurants
üìç **2** pour ceux pr√®s de vous`);
      }
      
    } catch (error) {
      console.error('‚ùå [RestaurantDiscovery] Erreur mode selection:', error);
      await this.messageSender.sendMessage(phoneNumber, 
        '‚ùå Erreur. Tapez **1** ou **2** pour choisir.');
    }
  }

  /**
   * Afficher tous les restaurants disponibles
   */
  async showAllRestaurants(phoneNumber: string): Promise<void> {
    try {
      const restaurants = await this.restaurantDiscoveryService.getAvailableRestaurants();
      
      // Mettre √† jour session avec liste
      await this.updateSessionWithRestaurants(phoneNumber, restaurants, 'all');
      
      const message = this.restaurantDiscoveryService.formatRestaurantList(restaurants);
      await this.messageSender.sendMessage(phoneNumber, message);
      
    } catch (error) {
      console.error('‚ùå [RestaurantDiscovery] Erreur showAllRestaurants:', error);
      await this.messageSender.sendMessage(phoneNumber, 
        '‚ùå Erreur lors de la r√©cup√©ration des restaurants. Veuillez r√©essayer.');
    }
  }

  /**
   * Demander partage de position utilisateur
   * UTILISE SessionManager existant
   */
  async requestLocation(phoneNumber: string): Promise<void> {
    try {
      // R√©cup√©rer session actuelle puis mettre √† jour avec SessionManager
      const session = await this.sessionManager.getSession(phoneNumber);
      if (!session) {
        console.error('‚ùå [RestaurantDiscovery] Session introuvable pour requestLocation');
        return;
      }

      await this.sessionManager.updateSession(session.id, {
        botState: 'AWAITING_USER_LOCATION'
      });
      
      const message = this.restaurantDiscoveryService.formatLocationRequest();
      await this.messageSender.sendMessage(phoneNumber, message);
      
    } catch (error) {
      console.error('‚ùå [RestaurantDiscovery] Erreur requestLocation:', error);
      await this.messageSender.sendMessage(phoneNumber, 
        '‚ùå Erreur. Tapez **1** pour voir tous les restaurants.');
    }
  }

  /**
   * Traiter message de g√©olocalisation re√ßu
   */
  async handleLocationMessage(phoneNumber: string, session: any, message: string): Promise<void> {
    try {
      if (message.startsWith('GPS:')) {
        const coords = message.substring(4).split(',');
        const latitude = parseFloat(coords[0]);
        const longitude = parseFloat(coords[1]);
        
        console.log(`üìç [RestaurantDiscovery] Coordonn√©es re√ßues: ${latitude}, ${longitude}`);
        
        if (LocationService.isValidCoordinates({ latitude, longitude })) {
          await this.showNearbyRestaurants(phoneNumber, latitude, longitude);
        } else {
          await this.messageSender.sendMessage(phoneNumber, 
            `‚ùå **Coordonn√©es invalides**

üí° Veuillez partager votre position ou tapez **1** pour voir tous les restaurants.`);
        }
      } else {
        // Message non GPS en attente de localisation
        await this.messageSender.sendMessage(phoneNumber, 
          `üìç **En attente de votre position**

Partagez votre position ou tapez **1** pour voir tous les restaurants.`);
      }
      
    } catch (error) {
      console.error('‚ùå [RestaurantDiscovery] Erreur handleLocationMessage:', error);
      await this.messageSender.sendMessage(phoneNumber, 
        '‚ùå Erreur. Tapez **1** pour voir tous les restaurants.');
    }
  }

  /**
   * Afficher restaurants proches avec distances
   */
  async showNearbyRestaurants(phoneNumber: string, lat: number, lng: number): Promise<void> {
    try {
      const nearbyRestaurants = await this.restaurantDiscoveryService
        .getNearbyRestaurants(lat, lng);
        
      // Mettre √† jour session
      await this.updateSessionWithRestaurants(phoneNumber, nearbyRestaurants, 'nearby', { lat, lng });
      
      const message = this.restaurantDiscoveryService.formatNearbyRestaurantList(nearbyRestaurants);
      await this.messageSender.sendMessage(phoneNumber, message);
      
    } catch (error) {
      console.error('‚ùå [RestaurantDiscovery] Erreur showNearbyRestaurants:', error);
      await this.messageSender.sendMessage(phoneNumber, 
        '‚ùå Erreur lors de la recherche. Tapez **1** pour voir tous les restaurants.');
    }
  }

  /**
   * G√©rer s√©lection finale du restaurant par num√©ro
   */
  async handleRestaurantSelection(phoneNumber: string, session: any, message: string): Promise<void> {
    try {
      const choice = parseInt(message.trim());
      const restaurants = session.sessionData.availableRestaurants;
      
      console.log(`üè™ [RestaurantDiscovery] S√©lection: ${choice} parmi ${restaurants?.length} restaurants`);
      
      if (restaurants && choice >= 1 && choice <= restaurants.length) {
        const selectedRestaurant = restaurants[choice - 1];
        console.log(`‚úÖ [RestaurantDiscovery] Restaurant s√©lectionn√©: ${selectedRestaurant.name}`);
        
        // CONNEXION AVEC WORKFLOW EXISTANT
        await this.startExistingRestaurantWorkflow(phoneNumber, selectedRestaurant);
      } else {
        await this.messageSender.sendMessage(phoneNumber, 
          `‚ùå **Choix invalide**

Tapez un num√©ro entre **1** et **${restaurants?.length || 0}**.`);
      }
      
    } catch (error) {
      console.error('‚ùå [RestaurantDiscovery] Erreur handleRestaurantSelection:', error);
      await this.messageSender.sendMessage(phoneNumber, 
        '‚ùå Erreur de s√©lection. Veuillez r√©essayer.');
    }
  }

  /**
   * D√©marrer workflow restaurant existant (connexion avec l'existant)
   */
  async startExistingRestaurantWorkflow(phoneNumber: string, restaurant: any): Promise<void> {
    try {
      console.log(`üîÑ [RestaurantDiscovery] D√©marrage workflow existant pour: ${restaurant.name}`);
      
      // Supprimer session discovery et cr√©er session restaurant normale
      await this.deleteSession(phoneNumber);
      
      // UTILISE LA FONCTION EXISTANTE (pas de r√©gression)
      await this.handleDirectRestaurantAccess(phoneNumber, restaurant);
      
    } catch (error) {
      console.error('‚ùå [RestaurantDiscovery] Erreur startExistingRestaurantWorkflow:', error);
      await this.messageSender.sendMessage(phoneNumber, 
        '‚ùå Erreur lors du d√©marrage. Veuillez r√©essayer.');
    }
  }

  /**
   * Utilitaire pour mettre √† jour session avec restaurants
   * UTILISE SessionManager existant
   */
  private async updateSessionWithRestaurants(
    phoneNumber: string, 
    restaurants: any[], 
    mode: string, 
    userLocation?: { lat: number, lng: number }
  ): Promise<void> {
    try {
      // R√©cup√©rer session actuelle puis mettre √† jour avec SessionManager
      const session = await this.sessionManager.getSession(phoneNumber);
      if (!session) {
        console.error('‚ùå [RestaurantDiscovery] Session introuvable pour updateSessionWithRestaurants');
        throw new Error('Session introuvable');
      }

      await this.sessionManager.updateSession(session.id, {
        botState: 'SELECTING_FROM_LIST',
        sessionData: {
          ...session.sessionData, // Pr√©server donn√©es existantes
          availableRestaurants: restaurants,
          selectionMode: mode,
          userLocation: userLocation || null
        }
      });
        
    } catch (error) {
      console.error('‚ùå [RestaurantDiscovery] Erreur updateSessionWithRestaurants:', error);
      throw error;
    }
  }

  /**
   * G√©rer la multis√©lection pour cat√©gories simples (ex: P√ÇTES "4,5")
   */
  private async handleCategoryMultiSelection(phoneNumber: string, session: any, message: string): Promise<void> {
    const selections = message.split(',').map(s => parseInt(s.trim())).filter(n => !isNaN(n));
    const products = session.sessionData?.products || [];

    // Validation
    for (const num of selections) {
      if (num < 1 || num > products.length) {
        await this.messageSender.sendMessage(phoneNumber,
          `‚ùå Choix invalide: ${num}. Choisissez entre 1 et ${products.length}.`);
        return;
      }
    }

    // Cr√©er items panier
    const cartItems = selections.map(num => ({
      productId: products[num - 1].id,
      name: products[num - 1].name,
      price: products[num - 1].price,
      quantity: 1,
      selectedIndex: num,
      categoryName: session.sessionData?.currentCategoryName || 'Produit',
      categoryId: session.sessionData?.currentCategoryId || null,
      icon: products[num - 1].icon || null
    }));

    // Mettre √† jour session avec panier
    const currentCart = session.sessionData?.cart || [];
    const cartArray = Array.isArray(currentCart) ? currentCart : Object.values(currentCart);

    console.log('üîç DEBUG_CART_BEFORE_UPDATE:', JSON.stringify(currentCart));
    console.log('üîç DEBUG_CART_ITEMS_TO_ADD:', JSON.stringify(cartItems));
    const finalCart = [...cartArray, ...cartItems];
    console.log('üîç DEBUG_CART_FINAL:', JSON.stringify(finalCart));

    await this.sessionManager.updateSession(session.id, {
      sessionData: {
        ...session.sessionData,
        cart: finalCart
      }
    });

    // NOUVELLE VALIDATION : V√©rifier si tous les produits sont simples
    const selectedProducts = selections.map(num => products[num - 1]);
    const hasCompositeProducts = selectedProducts.some(product =>
      product.requires_steps ||
      product.workflow_type === 'composite' ||
      product.type === 'composite' ||
      (product.france_product_sizes && product.france_product_sizes.length > 0)
    );

    if (hasCompositeProducts) {
      const categoryName = session.sessionData?.currentCategoryName || 'cette cat√©gorie';
      await this.messageSender.sendMessage(phoneNumber,
        `‚ùå Multis√©lection non autoris√©e pour ${categoryName}.\n` +
        `üîß Ces produits n√©cessitent une configuration individuelle.\n` +
        `üìã S√©lectionnez un produit √† la fois (ex: tapez "1")`);
      return;
    }

    // Si tous sont simples ‚Üí Continuer avec la logique simplifi√©e
    await this.addMultipleSimpleProducts(phoneNumber, session, selectedProducts);
  }

  /**
   * Ajouter plusieurs produits simples
   */
  private async addMultipleSimpleProducts(phoneNumber: string, session: any, selectedProducts: any[]): Promise<void> {
    // Message de confirmation
    const productNames = selectedProducts.map(p => p.name).join(', ');
    await this.messageSender.sendMessage(phoneNumber,
      `‚úÖ Ajout√©: ${productNames}\n‚û°Ô∏è √âtape suivante...`);

    // Appeler handleQuantityInput UNE SEULE FOIS avec le premier produit
    // (pour d√©clencher l'√©tape suivante comme boissons)
    const tempSession = {
      ...session,
      sessionData: {
        ...session.sessionData,
        selectedProduct: selectedProducts[0], // Premier produit pour workflow
        multiSelectedProducts: selectedProducts // Tous les produits pour le panier
      }
    };

    await this.handleQuantityInput(phoneNumber, tempSession, '1');
  }

  /**
   * NOUVEAU: Handler affichage liste adresses apr√®s "99"
   */
  private async handleAddressListRequest(phoneNumber: string, session: any): Promise<void> {
    try {
      // R√©cup√©rer config restaurant
      const restaurantId = session.sessionData?.selectedRestaurantId || session.restaurantId;
      const supabase = await this.getSupabaseClient();

      const { data: restaurant } = await supabase
        .from('france_restaurants')
        .select('delivery_address_mode')
        .eq('id', restaurantId)
        .single();

      // R√©cup√©rer adresses client
      const cleanPhone = phoneNumber.replace('@c.us', '');
      const existingAddresses = await this.addressService.getCustomerAddresses(cleanPhone);

      // Afficher liste avec format moderne
      let message = existingAddresses?.length > 0
        ? `üìç Vos adresses enregistr√©es :\n\n`
        : `Aucune adresse enregistr√©e.\n\n`;

      // Lister adresses existantes avec format moderne
      existingAddresses?.forEach((addr: any, index: number) => {
        // S√©parateur visuel
        message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;

        // Emoji num√©rot√©
        const numberEmoji = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£'][index] || `${index + 1}Ô∏è‚É£`;

        // Emoji selon le type d'adresse
        let typeEmoji = 'üè†';
        if (addr.address_label.toLowerCase().includes('bureau')) {
          typeEmoji = 'üè¢';
        }

        // Nom en majuscules avec badge favori
        const labelUpper = addr.address_label.toUpperCase();
        const favoriteTag = addr.is_default ? ' ‚≠ê FAVORI' : '';
        message += `${numberEmoji} ${typeEmoji} ${labelUpper}${favoriteTag}\n`;

        // Parser l'adresse pour s√©parer rue et ville/code postal
        const addressParts = addr.full_address.split(',');
        if (addressParts.length >= 2) {
          const street = addressParts[0].trim();
          const cityPostal = addressParts.slice(1).join(',').trim();
          message += `üìç ${street}\n`;
          message += `üìÆ ${cityPostal}\n\n`;
        } else {
          // Fallback si format non standard
          message += `üìç ${addr.full_address}\n\n`;
        }
      });

      const nextNum = (existingAddresses?.length || 0) + 1;
      const nextNumberEmoji = ['1Ô∏è‚É£', '2Ô∏è‚É£', '3Ô∏è‚É£', '4Ô∏è‚É£', '5Ô∏è‚É£'][nextNum - 1] || `${nextNum}Ô∏è‚É£`;

      if (existingAddresses?.length > 0) {
        message += `‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n`;
      }

      // Option partage position (SI resto en mode geolocation)
      const showGpsOption = restaurant?.delivery_address_mode === 'geolocation';
      if (showGpsOption) {
        message += `${nextNumberEmoji} üìç Partager ma position\n\n`;
      } else if (existingAddresses?.length > 0) {
        message += `${nextNumberEmoji} ‚ûï Nouvelle adresse\n\n`;
      }

      if (existingAddresses?.length > 0) {
        message += `üí° Tapez le num√©ro de votre choix`;
      } else {
        message += `Tapez votre adresse directement`;
      }

      await this.messageSender.sendMessage(phoneNumber, message);

      await this.sessionManager.updateSession(session.id, {
        botState: 'AWAITING_ADDRESS_CHOICE',
        sessionData: {
          ...session.sessionData,
          existingAddresses: existingAddresses || [],
          showGpsOption: showGpsOption
        }
      });

    } catch (error) {
      console.error('‚ùå [AddressListRequest] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur lors de la r√©cup√©ration des adresses. Veuillez r√©essayer.');
    }
  }

  /**
   * NOUVEAU: Handler r√©ception position GPS
   */
  private async handleGpsLocationShare(phoneNumber: string, session: any, message: string): Promise<void> {
    try {
      // La position GPS devrait venir via le type 'location' du message WhatsApp
      // Ce handler g√®re les messages texte pendant l'attente GPS
      await this.messageSender.sendMessage(phoneNumber,
        '‚è≥ En attente de votre position GPS...\n\nüìç Utilisez le bouton "üìé Pi√®ce jointe" puis "Position" dans WhatsApp'
      );
    } catch (error) {
      console.error('‚ùå [GpsLocationShare] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur. Tapez "annuler" pour recommencer.');
    }
  }

  /**
   * NOUVEAU: Mettre √† jour adresse par d√©faut
   */
  private async updateDefaultAddress(phoneNumber: string, addressId: number): Promise<void> {
    try {
      const supabase = await this.getSupabaseClient();
      const cleanPhone = phoneNumber.replace('@c.us', '');

      // Retirer is_default de toutes
      await supabase
        .from('france_customer_addresses')
        .update({ is_default: false })
        .eq('phone_number', `${cleanPhone}@c.us`);

      // Mettre celle-ci en d√©faut
      await supabase
        .from('france_customer_addresses')
        .update({
          is_default: true,
          updated_at: this.getCurrentTime().toISOString()
        })
        .eq('id', addressId);

      console.log(`‚úÖ [updateDefaultAddress] Adresse ${addressId} d√©finie par d√©faut`);
    } catch (error) {
      console.error('‚ùå [updateDefaultAddress] Erreur:', error);
    }
  }

  /**
   * NOUVEAU: Obtenir ic√¥ne selon label adresse
   */
  private getAddressIcon(label: string): string {
    if (label.includes('Maison')) return 'üè†';
    if (label.includes('Bureau')) return 'üíº';
    if (label.includes('Travail')) return 'üè¢';
    if (label.includes('GPS') || label.includes('Position')) return 'üìç';
    return 'üìç';
  }

  /**
   * NOUVEAU: G√©rer r√©ception position GPS r√©elle
   */
  private async handleGpsLocationReceived(phoneNumber: string, gpsMessage: string): Promise<void> {
    try {
      console.log('üìç [GPS] R√©ception position GPS:', gpsMessage);

      const session = await this.sessionManager.getSession(phoneNumber);

      if (!session || session.botState !== 'AWAITING_GPS_LOCATION') {
        console.log('‚ö†Ô∏è [GPS] Position GPS re√ßue mais √©tat invalide:', session?.botState);
        return;
      }

      // Extraire coordonn√©es du format "GPS:lat,lng"
      const coords = gpsMessage.replace('GPS:', '').split(',');
      const latitude = parseFloat(coords[0]);
      const longitude = parseFloat(coords[1]);

      console.log('üìç [GPS] Coordonn√©es extraites:', { latitude, longitude });

      // NOUVEAU: Stocker coordonn√©es temporairement et demander label
      await this.sessionManager.updateSession(session.id, {
        botState: 'AWAITING_GPS_LABEL',
        sessionData: {
          ...session.sessionData,
          pendingGpsLocation: {
            latitude: latitude,
            longitude: longitude
          }
        }
      });

      // Demander label
      await this.messageSender.sendMessage(phoneNumber,
        'üìç *Position enregistr√©e !*\n\n' +
        'Comment voulez-vous nommer cette adresse ?\n\n' +
        '1. üè† Maison\n' +
        '2. üíº Bureau\n' +
        '3. üè¢ Travail\n' +
        '4. ‚úèÔ∏è Autre (saisir nom)\n\n' +
        'Tapez le num√©ro de votre choix'
      );

    } catch (error) {
      console.error('‚ùå [GPS] Erreur traitement position:', error);
      await this.messageSender.sendMessage(phoneNumber,
        '‚ùå Erreur traitement position GPS. R√©essayez.'
      );
    }
  }

  /**
   * NOUVEAU: G√©rer choix du label pour adresse GPS
   */
  private async handleGpsLabelChoice(phoneNumber: string, session: any, message: string): Promise<void> {
    try {
      const choice = parseInt(message.trim());
      let label = '';

      switch (choice) {
        case 1:
          label = 'Maison';
          break;
        case 2:
          label = 'Bureau';
          break;
        case 3:
          label = 'Travail';
          break;
        case 4:
          // Demander saisie libre
          await this.messageSender.sendMessage(phoneNumber,
            '‚úèÔ∏è Quel nom voulez-vous donner √† cette adresse ?\n\n' +
            'üí° Exemple : Chez Pierre, Salle de sport, Resto pr√©f√©r√©...'
          );
          await this.sessionManager.updateSession(session.id, {
            botState: 'AWAITING_GPS_CUSTOM_LABEL',
            sessionData: session.sessionData
          });
          return;
        default:
          await this.messageSender.sendMessage(phoneNumber, '‚ùå Choix invalide. Tapez 1, 2, 3 ou 4');
          return;
      }

      // Sauvegarder avec label pr√©d√©fini
      await this.saveGpsAddressWithLabel(phoneNumber, session, label);

    } catch (error) {
      console.error('‚ùå [GpsLabelChoice] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur. Tapez "annuler" pour recommencer.');
    }
  }

  /**
   * NOUVEAU: G√©rer label personnalis√© pour adresse GPS
   */
  private async handleGpsCustomLabel(phoneNumber: string, session: any, message: string): Promise<void> {
    try {
      const customLabel = message.trim();

      if (customLabel.length < 2) {
        await this.messageSender.sendMessage(phoneNumber, '‚ùå Nom trop court. Minimum 2 caract√®res.');
        return;
      }

      if (customLabel.length > 50) {
        await this.messageSender.sendMessage(phoneNumber, '‚ùå Nom trop long. Maximum 50 caract√®res.');
        return;
      }

      // Sauvegarder avec label personnalis√©
      await this.saveGpsAddressWithLabel(phoneNumber, session, customLabel);

    } catch (error) {
      console.error('‚ùå [GpsCustomLabel] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber, '‚ùå Erreur. R√©essayez.');
    }
  }

  /**
   * NOUVEAU: Sauvegarder adresse GPS avec label et cr√©er commande
   */
  private async saveGpsAddressWithLabel(phoneNumber: string, session: any, label: string): Promise<void> {
    try {
      const { latitude, longitude } = session.sessionData.pendingGpsLocation;
      const cleanPhone = phoneNumber.replace('@c.us', '');
      const supabase = await this.getSupabaseClient();

      console.log(`üíæ [GPS] Sauvegarde adresse avec label: ${label}`);

      // Retirer is_default des autres adresses
      await supabase
        .from('france_customer_addresses')
        .update({ is_default: false })
        .eq('phone_number', `${cleanPhone}@c.us`);

      // Cr√©er nouvelle adresse avec label personnalis√©
      const { data: savedAddress, error } = await supabase
        .from('france_customer_addresses')
        .insert({
          phone_number: `${cleanPhone}@c.us`,
          address_label: label,
          full_address: `Position GPS: ${latitude}, ${longitude}`,
          address_type: 'geolocation',
          latitude: latitude,
          longitude: longitude,
          is_default: true,
          is_active: true
        })
        .select()
        .single();

      if (error || !savedAddress) {
        console.error('‚ùå [GPS] Erreur sauvegarde adresse:', error);
        await this.messageSender.sendMessage(phoneNumber,
          '‚ùå Erreur enregistrement adresse. R√©essayez.'
        );
        return;
      }

      console.log(`‚úÖ [GPS] Adresse GPS "${label}" sauvegard√©e avec ID: ${savedAddress.id}`);

      // Traiter commande avec cette adresse
      await this.processOrderWithAddress(phoneNumber, session, savedAddress);

    } catch (error) {
      console.error('‚ùå [saveGpsAddressWithLabel] Erreur:', error);
      await this.messageSender.sendMessage(phoneNumber,
        '‚ùå Erreur sauvegarde. Tapez "annuler" pour recommencer.'
      );
    }
  }

  // ========================================================================
  // M√âTHODES RGPD - CONSENTEMENT EXPLICITE (Article 6 RGPD)
  // ========================================================================

  /**
   * V√©rifier si un client a d√©j√† donn√© son consentement GDPR
   * Article 7 RGPD - Preuve du consentement
   */
  private async checkGdprConsent(phoneNumber: string): Promise<boolean> {
    try {
      const supabase = await this.getSupabaseClient();
      const { data, error } = await supabase
        .from('france_gdpr_consents')
        .select('consent_given')
        .eq('phone_number', phoneNumber)
        .eq('consent_given', true)
        .maybeSingle();

      if (error) {
        console.error('‚ùå [GDPR] Erreur v√©rification consentement:', error);
        return false;
      }

      const hasConsent = !!data;
      console.log(`üîí [GDPR] Consentement pour ${phoneNumber}: ${hasConsent}`);
      return hasConsent;

    } catch (error) {
      console.error('‚ùå [GDPR] Erreur checkGdprConsent:', error);
      return false;
    }
  }

  /**
   * G√©rer le workflow de consentement GDPR - VERSION SIMPLIFI√âE
   * Article 6 RGPD - Consentement libre, sp√©cifique, √©clair√© et univoque
   * ‚úÖ NE TOUCHE PAS la session - utilise UNIQUEMENT france_gdpr_consents
   */
  private async handleGDPRConsent(phoneNumber: string, message: string): Promise<void> {
    try {
      const response = message.toLowerCase().trim();

      // Cas 1 : Client accepte le consentement
      if (response === 'ok') {
        await this.saveGdprConsent(phoneNumber, true);

        await this.messageSender.sendMessage(phoneNumber,
          `‚úÖ Merci ! Votre consentement a √©t√© enregistr√©. üçï`);

        // ‚úÖ R√©cup√©rer le contexte stock√© en base et continuer le bon workflow
        const context = await this.getPendingWorkflow(phoneNumber);

        if (context) {
          // Nettoyer le contexte en base apr√®s r√©cup√©ration
          await this.clearPendingWorkflow(phoneNumber);

          // Continuer selon le type de contexte
          if (context.type === 'resto') {
            // Workflow "resto" : afficher menu choix restaurants
            await this.handleRestoCommand(phoneNumber);
          } else if (context.type === 'direct_access' && context.restaurant) {
            // Workflow QR code : afficher menu du restaurant scann√©
            await this.handleDirectRestaurantAccess(phoneNumber, context.restaurant);
          }
        } else {
          // Pas de contexte trouv√© (ne devrait pas arriver)
          await this.messageSender.sendMessage(phoneNumber,
            `Tapez **resto** pour voir les restaurants disponibles.`);
        }

        return;
      }

      // Cas 2 : Client refuse le consentement
      if (response === 'non' || response === 'no' || response === 'refuse') {
        await this.saveGdprConsent(phoneNumber, false);

        // Nettoyer le contexte stock√© en base
        await this.clearPendingWorkflow(phoneNumber);

        await this.messageSender.sendMessage(phoneNumber,
          `‚ùå **Consentement refus√©**

Sans votre consentement, nous ne pouvons malheureusement pas traiter de commande.

Si vous changez d'avis, vous pouvez nous recontacter √† tout moment.

Merci de votre compr√©hension ! üëã`);
        return;
      }

      // Cas 3 : R√©ponse invalide ‚Üí R√©afficher l'√©cran
      await this.showGdprConsentScreen(phoneNumber);

    } catch (error) {
      console.error('‚ùå [GDPR] Erreur handleGDPRConsent:', error);
      await this.messageSender.sendMessage(phoneNumber,
        `‚ùå Une erreur est survenue. Veuillez r√©essayer.`);
    }
  }

  /**
   * Afficher l'√©cran de consentement GDPR
   * Article 13 RGPD - Information des personnes
   */
  private async showGdprConsentScreen(phoneNumber: string): Promise<void> {
    // R√©cup√©rer le nom du restaurant si contexte disponible
    const restaurantName = this.restaurantConfig?.brandName || this.restaurantConfig?.name || 'notre restaurant';

    const message = `üîí Bienvenue chez ${restaurantName} !

Pour commander, nous collectons :
‚Ä¢ Nom, t√©l√©phone, adresse

Ces donn√©es servent uniquement pour votre commande.

üìÑ Infos compl√®tes : https://botresto.vercel.app/legal/privacy-policy

Tapez OK pour accepter et commander.`;

    await this.messageSender.sendMessage(phoneNumber, message);
  }

  /**
   * Enregistrer le consentement GDPR en base de donn√©es
   * Article 7 RGPD - Conservation de la preuve du consentement
   */
  private async saveGdprConsent(phoneNumber: string, consentGiven: boolean): Promise<void> {
    try {
      const supabase = await this.getSupabaseClient();

      // V√©rifier si un consentement existe d√©j√†
      const { data: existing } = await supabase
        .from('france_gdpr_consents')
        .select('id')
        .eq('phone_number', phoneNumber)
        .maybeSingle();

      const consentData = {
        phone_number: phoneNumber,
        consent_given: consentGiven,
        consent_date: new Date().toISOString(),
        consent_method: 'whatsapp',
        ip_address: null, // WhatsApp ne fournit pas l'IP
        user_agent: 'WhatsApp Bot',
        updated_at: new Date().toISOString()
      };

      if (existing) {
        // Mettre √† jour le consentement existant
        await supabase
          .from('france_gdpr_consents')
          .update(consentData)
          .eq('id', existing.id);

        console.log(`‚úÖ [GDPR] Consentement mis √† jour pour ${phoneNumber}: ${consentGiven}`);
      } else {
        // Cr√©er un nouveau consentement
        await supabase
          .from('france_gdpr_consents')
          .insert(consentData);

        console.log(`‚úÖ [GDPR] Consentement cr√©√© pour ${phoneNumber}: ${consentGiven}`);
      }

    } catch (error) {
      console.error('‚ùå [GDPR] Erreur saveGdprConsent:', error);
      throw error;
    }
  }

  /**
   * Sauvegarder le workflow en attente en base de donn√©es
   * Article 7 RGPD - Persistance du contexte pour continuit√© apr√®s consentement
   */
  private async savePendingWorkflow(phoneNumber: string, workflow: { type: 'resto' | 'direct_access', restaurant?: any }): Promise<void> {
    try {
      const supabase = await this.getSupabaseClient();

      // V√©rifier si un enregistrement existe d√©j√†
      const { data: existing } = await supabase
        .from('france_gdpr_consents')
        .select('id')
        .eq('phone_number', phoneNumber)
        .maybeSingle();

      if (existing) {
        // Mettre √† jour le pending_workflow
        await supabase
          .from('france_gdpr_consents')
          .update({ pending_workflow: workflow })
          .eq('id', existing.id);

        console.log(`üîí [GDPR] Workflow sauvegard√© pour ${phoneNumber}:`, workflow.type);
      } else {
        // Cr√©er un nouvel enregistrement avec pending_workflow
        await supabase
          .from('france_gdpr_consents')
          .insert({
            phone_number: phoneNumber,
            consent_given: false,
            consent_date: new Date().toISOString(),
            consent_method: 'whatsapp',
            pending_workflow: workflow,
            ip_address: null,
            user_agent: 'WhatsApp Bot',
            created_at: new Date().toISOString(),
            updated_at: new Date().toISOString()
          });

        console.log(`üîí [GDPR] Enregistrement cr√©√© avec workflow pour ${phoneNumber}:`, workflow.type);
      }

    } catch (error) {
      console.error('‚ùå [GDPR] Erreur savePendingWorkflow:', error);
      throw error;
    }
  }

  /**
   * R√©cup√©rer le workflow en attente depuis la base de donn√©es
   */
  private async getPendingWorkflow(phoneNumber: string): Promise<{ type: 'resto' | 'direct_access', restaurant?: any } | null> {
    try {
      const supabase = await this.getSupabaseClient();

      const { data } = await supabase
        .from('france_gdpr_consents')
        .select('pending_workflow')
        .eq('phone_number', phoneNumber)
        .maybeSingle();

      if (data && data.pending_workflow) {
        console.log(`üîí [GDPR] Workflow r√©cup√©r√© pour ${phoneNumber}:`, data.pending_workflow);
        return data.pending_workflow;
      }

      console.log(`üîí [GDPR] Aucun workflow en attente pour ${phoneNumber}`);
      return null;

    } catch (error) {
      console.error('‚ùå [GDPR] Erreur getPendingWorkflow:', error);
      return null;
    }
  }

  /**
   * Nettoyer le workflow en attente de la base de donn√©es
   */
  private async clearPendingWorkflow(phoneNumber: string): Promise<void> {
    try {
      const supabase = await this.getSupabaseClient();

      await supabase
        .from('france_gdpr_consents')
        .update({ pending_workflow: null })
        .eq('phone_number', phoneNumber);

      console.log(`üîí [GDPR] Workflow nettoy√© pour ${phoneNumber}`);

    } catch (error) {
      console.error('‚ùå [GDPR] Erreur clearPendingWorkflow:', error);
    }
  }
}

/**
 * Factory pour cr√©er une instance du bot universel
 * SOLID - Dependency Injection : Injection des d√©pendances
 */
export class UniversalBotFactory {

  static create(
    sessionManager: ISessionManager,
    configManager: IRestaurantConfigManager,
    workflowExecutor: IWorkflowExecutor,
    messageSender: IMessageSender
  ): UniversalBot {

    return new UniversalBot(
      sessionManager,
      configManager,
      workflowExecutor,
      messageSender
    );
  }
}