/**
 * Script de test pour le service RestaurantScheduleService
 */

import { RestaurantScheduleService } from './services/restaurant-schedule.service.ts';

const scheduleService = new RestaurantScheduleService();

// Mock d'un restaurant avec horaires
const mockRestaurant = {
  name: 'Pizza Yolo Test',
  is_active: true,
  is_exceptionally_closed: false,
  business_hours: {
    'lundi': { isOpen: true, opening: '11:00', closing: '22:00' },
    'mardi': { isOpen: true, opening: '11:00', closing: '22:00' },
    'mercredi': { isOpen: false },
    'jeudi': { isOpen: true, opening: '18:00', closing: '02:00' }, // Horaire nocturne
    'vendredi': { isOpen: true, opening: '11:00', closing: '23:00' },
    'samedi': { isOpen: true, opening: '11:00', closing: '23:00' },
    'dimanche': { isOpen: true, opening: '12:00', closing: '23:00' } // √âtendu pour test ouvert
  }
};

// Mock restaurant sans horaires
const mockRestaurantNoSchedule = {
  name: 'Restaurant Sans Horaires',
  is_active: true,
  is_exceptionally_closed: false,
  business_hours: null
};

// Mock restaurant avec fermeture exceptionnelle
const mockRestaurantExceptional = {
  name: 'Pizza Yolo Ferm√©',
  is_active: true,
  is_exceptionally_closed: true,
  business_hours: {
    'dimanche': { isOpen: true, opening: '12:00', closing: '23:00' }
  }
};

// Mock restaurant inactif
const mockRestaurantInactive = {
  name: 'Pizza Yolo Inactif',
  is_active: false,
  business_hours: {
    'dimanche': { isOpen: true, opening: '12:00', closing: '23:00' }
  }
};

function testScheduleService() {
  console.log('üß™ Test du RestaurantScheduleService avec nouvelle logique de priorit√©\n');
  
  // Test 1: Restaurant avec horaires (devrait √™tre ouvert)
  console.log('üìã Test 1: Restaurant avec horaires configur√©s');
  const result1 = scheduleService.checkRestaurantSchedule(mockRestaurant);
  console.log('R√©sultat:', result1);
  const message1 = scheduleService.getScheduleMessage(result1, mockRestaurant.name);
  console.log('Message g√©n√©r√©:', message1);
  console.log('');
  
  // Test 2: Restaurant sans horaires
  console.log('üìã Test 2: Restaurant sans horaires');
  const result2 = scheduleService.checkRestaurantSchedule(mockRestaurantNoSchedule);
  console.log('R√©sultat:', result2);
  const message2 = scheduleService.getScheduleMessage(result2, mockRestaurantNoSchedule.name);
  console.log('Message g√©n√©r√©:', message2);
  console.log('');
  
  // Test 3: PRIORIT√â 1 - Restaurant ferm√© exceptionnellement (priorit√© max)
  console.log('üìã Test 3: Restaurant ferm√© exceptionnellement (PRIORIT√â 1)');
  const result3 = scheduleService.checkRestaurantSchedule(mockRestaurantExceptional);
  console.log('R√©sultat:', result3);
  const message3 = scheduleService.getScheduleMessage(result3, mockRestaurantExceptional.name);
  console.log('Message g√©n√©r√©:', message3);
  console.log('');
  
  // Test 4: PRIORIT√â 2 - Restaurant inactif
  console.log('üìã Test 4: Restaurant inactif (PRIORIT√â 2)');
  const result4 = scheduleService.checkRestaurantSchedule(mockRestaurantInactive);
  console.log('R√©sultat:', result4);
  const message4 = scheduleService.getScheduleMessage(result4, mockRestaurantInactive.name);
  console.log('Message g√©n√©r√©:', message4);
  console.log('');
  
  // Test 5: Horaires format√©s
  console.log('üìã Test 5: Affichage horaires format√©s');
  const formattedSchedule = scheduleService.getFormattedSchedule(mockRestaurant.business_hours);
  console.log('Horaires format√©s:');
  console.log(formattedSchedule);
  
  console.log('‚úÖ Tests de priorit√© termin√©s avec succ√®s!');
  console.log('\nüî• ORDRE DE PRIORIT√â V√âRIFI√â:');
  console.log('1. Fermeture exceptionnelle (is_exceptionally_closed)');
  console.log('2. Statut g√©n√©ral (is_active)');
  console.log('3. Horaires normaux (business_hours)');
}

// Ex√©cuter les tests si le script est appel√© directement
if (import.meta.main) {
  testScheduleService();
}