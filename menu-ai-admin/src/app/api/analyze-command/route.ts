// üß† API ANALYSE COMMANDE - INTELLIGENCE ARTIFICIELLE
// ===================================================

import { NextRequest, NextResponse } from 'next/server';
import OpenAI from 'openai';
import { SupabaseDataLoader } from '@/lib/supabase-data-loader';
import { AIResponse } from '@/lib/types';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

export async function POST(request: NextRequest) {
  try {
    console.log('üîç D√©but analyse commande...');

    // Debug de la requ√™te
    const rawBody = await request.text();
    console.log('üìã Body re√ßu:', rawBody);

    let parsedBody;
    try {
      parsedBody = JSON.parse(rawBody);
    } catch (parseError) {
      console.error('‚ùå Erreur parsing JSON:', parseError);
      return NextResponse.json({
        success: false,
        error: 'JSON invalide: ' + parseError.message,
        confidence: 0
      });
    }

    const { command, restaurantId } = parsedBody;
    console.log('üìù Commande:', command);
    console.log('üè™ Restaurant ID:', restaurantId);

    if (!command || !restaurantId) {
      console.log('‚ùå Param√®tres manquants');
      return NextResponse.json({
        success: false,
        error: 'Commande et restaurantId requis',
        confidence: 0
      });
    }

    // Chargement des donn√©es depuis Supabase DEV/PROD
    console.log('üîó Cr√©ation SupabaseDataLoader...');
    const dataLoader = new SupabaseDataLoader();

    // Chargement des donn√©es restaurant depuis la base
    console.log('üìä Chargement donn√©es restaurant...');
    const restaurantData = await dataLoader.getRestaurantData(restaurantId);
    console.log('‚úÖ Donn√©es charg√©es:', {
      restaurant: restaurantData.restaurant?.name,
      categories: restaurantData.categories?.length,
      products: restaurantData.products?.length
    });

    // R√©duction des donn√©es pour limiter les tokens
    const optimizedData = {
      restaurant: restaurantData.restaurant,
      categories: restaurantData.categories, // Toutes les cat√©gories
      products: restaurantData.products.slice(0, 15), // Limiter √† 15 produits
      sample_workflows: restaurantData.sample_workflows
    };

    // Cr√©ation du prompt pour l'IA (ULTRA-INTELLIGENT)
    const systemPrompt = `
Tu es un EXPERT en gestion de base de donn√©es restaurant avec une INTELLIGENCE AVANC√âE pour analyser et modifier les menus.

üìä CONTEXTE RESTAURANT COMPLET :
${JSON.stringify(optimizedData, null, 2)}

üß† INTELLIGENCE CONTEXTUELLE AVANC√âE :
Tu dois analyser le PATTERN des produits existants dans chaque cat√©gorie pour :
1. **D√âTECTER LE STYLE** : Comment les produits sont nomm√©s, structur√©s, d√©crits
2. **MAINTENIR LA COH√âRENCE** : Respecter les conventions de nommage, prix, et format
3. **OPTIMISER L'ORDRE** : Calculer automatiquement le display_order suivant
4. **ADAPTER LE TYPE** : Comprendre si c'est simple/composite/modular selon la cat√©gorie

üéØ ANALYSE INTELLIGENTE PAR CAT√âGORIE :
- **SALADES** : Format "NOM" simple, prix 7-12‚Ç¨, type 'simple'
- **PIZZAS** : Format descriptif, prix 10-15‚Ç¨, souvent 'composite' avec tailles
- **BURGERS** : Style gourmand, prix 8-14‚Ç¨, type 'simple' ou 'composite'
- **TACOS** : Configuration complexe, 'composite' avec steps_config
- **DESSERTS** : Noms courts, prix 3-8‚Ç¨, type 'simple'

üîß R√àGLES TECHNIQUES AVANC√âES :
1. **IDs R√âELS OBLIGATOIRES** : Utiliser les vrais IDs de la base
2. **Prix automatiques** : Livraison = Sur place + 1‚Ç¨
3. **Display_order intelligent** : MAX(display_order) + 1 dans la cat√©gorie
4. **Slug g√©n√©r√©** : Minuscules, tirets, sans accents (ex: "salade-italienne")
5. **Type auto-d√©tect√©** : Selon les patterns de la cat√©gorie
6. **Composition coh√©rente** : Respecter le style des descriptions existantes

üé® D√âTECTION DE PATTERNS AVANC√âE :
Analyse les produits existants pour comprendre :
- Style de nommage (MAJUSCULES, Titre, mixte)
- Structure des descriptions (courte/longue, avec/sans ingr√©dients)
- Gamme de prix par cat√©gorie
- Type de workflow (simple/composite/modular)
- Format des slugs

üí° INTELLIGENCE PR√âDICTIVE :
- Si on ajoute une "Pizza Italienne" ‚Üí D√©tecter cat√©gorie "Pizzas", type probable 'composite'
- Si on ajoute un "Burger V√©g√©tarien" ‚Üí Cat√©gorie "BURGERS", style coh√©rent
- Si on ajoute une "Salade C√©sar" ‚Üí Cat√©gorie "SALADES", format simple

R√âPONSE JSON ULTRA-STRUCTUR√âE :
{
  "success": true,
  "sql": "BEGIN; INSERT INTO france_products (name, slug, category_id, restaurant_id, price_on_site_base, price_delivery_base, product_type, display_order, composition, requires_steps, steps_config, created_at, updated_at) VALUES ('Salade Italienne', 'salade-italienne', 15, 1, 9.50, 10.50, 'simple', 7, 'Salade verte, tomates, mozzarella, basilic, vinaigrette italienne', false, '{}', NOW(), NOW()); COMMIT;",
  "explanation": "Ajout intelligent d'une nouvelle salade en respectant le pattern existant : nom simple, prix coh√©rent, type 'simple', composition d√©taill√©e",
  "preview": {
    "action": "Ajout produit",
    "category": "SALADES (ID: 15)",
    "newProduct": "Salade Italienne",
    "position": 7,
    "priceOnSite": "9.50‚Ç¨",
    "priceDelivery": "10.50‚Ç¨",
    "type": "simple",
    "detectedPattern": "Style coh√©rent avec salades existantes"
  },
  "confidence": 98
}

IMPORTANT : R√©ponse UNIQUEMENT en JSON valide !
`;

    const userPrompt = `
COMMANDE √Ä ANALYSER :
"${command}"

RESTAURANT ID : ${restaurantId}

Analyse cette commande et g√©n√®re le SQL correspondant.

RAPPEL : R√©ponds UNIQUEMENT avec du JSON valide, pas de texte avant ou apr√®s !
`;

    console.log('ü§ñ Envoi requ√™te OpenAI...');
    const completion = await openai.chat.completions.create({
      model: "gpt-4o",
      messages: [
        { role: "system", content: systemPrompt },
        { role: "user", content: userPrompt }
      ],
      temperature: 0.1,
      max_tokens: 1500,
      response_format: { type: "json_object" }
    });
    console.log('‚úÖ R√©ponse OpenAI re√ßue');

    const aiResponse = completion.choices[0]?.message?.content;

    if (!aiResponse) {
      throw new Error('Pas de r√©ponse de l\'IA');
    }

    // Parse la r√©ponse JSON de l'IA
    let parsedResponse: AIResponse;
    try {
      parsedResponse = JSON.parse(aiResponse);
    } catch (parseError) {
      // Si l'IA n'a pas retourn√© du JSON valide, on cr√©e une r√©ponse par d√©faut
      parsedResponse = {
        success: false,
        error: 'R√©ponse IA invalide: ' + aiResponse.substring(0, 200),
        confidence: 0
      };
    }

    return NextResponse.json(parsedResponse);

  } catch (error) {
    console.error('Erreur API analyze-command:', error);

    return NextResponse.json({
      success: false,
      error: `Erreur serveur: ${error instanceof Error ? error.message : 'Erreur inconnue'}`,
      confidence: 0
    });
  }
}