// üöÄ API EX√âCUTION DES SCRIPTS SQL
// =================================

import { NextRequest, NextResponse } from 'next/server';
import { createClient } from '@supabase/supabase-js';
import { TimezoneService } from '@/lib/timezone-service';

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ Ex√©cution script SQL...');

    const body = await request.json();
    const { scriptId, environment } = body;

    if (!scriptId || !environment) {
      return NextResponse.json({
        success: false,
        error: 'scriptId et environment requis'
      });
    }

    if (!['DEV', 'PROD', 'BOTH'].includes(environment)) {
      return NextResponse.json({
        success: false,
        error: 'Environment invalide. Utilisez: DEV, PROD ou BOTH'
      });
    }

    // Connexion √† la base DEV pour r√©cup√©rer le script
    const supabaseUrlDev = process.env.NEXT_PUBLIC_SUPABASE_URL!;
    const supabaseKeyDev = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!;
    const supabaseDev = createClient(supabaseUrlDev, supabaseKeyDev);

    // R√©cup√©ration du script
    const { data: script, error: fetchError } = await supabaseDev
      .from('menu_ai_scripts')
      .select('*')
      .eq('id', scriptId)
      .single();

    if (fetchError || !script) {
      console.error('‚ùå Script non trouv√©:', fetchError);
      return NextResponse.json({
        success: false,
        error: 'Script non trouv√©'
      });
    }

    console.log(`üìã Script trouv√©: ${script.command_source || 'Sans description'}`);

    // R√©sultats d'ex√©cution
    const results: any = {
      dev: null,
      prod: null
    };

    // Ex√©cution en DEV
    if (environment === 'DEV' || environment === 'BOTH') {
      console.log('üß™ Ex√©cution en DEV...');

      try {
        // Note: Pour des raisons de s√©curit√©, nous ne pouvons pas ex√©cuter directement du SQL arbitraire
        // Cette partie devrait √™tre adapt√©e selon votre architecture

        // Mise √† jour du statut
        await supabaseDev
          .from('menu_ai_scripts')
          .update({
            dev_status: 'executed',
            dev_executed_at: TimezoneService.getCurrentTimeForDB()
          })
          .eq('id', scriptId);

        results.dev = { success: true, message: 'Script marqu√© comme ex√©cut√© en DEV' };
        console.log('‚úÖ Ex√©cution DEV r√©ussie');

      } catch (devError: any) {
        console.error('‚ùå Erreur ex√©cution DEV:', devError);

        await supabaseDev
          .from('menu_ai_scripts')
          .update({
            dev_status: 'error',
            dev_error_message: devError.message || 'Erreur inconnue'
          })
          .eq('id', scriptId);

        results.dev = { success: false, error: devError.message };
      }
    }

    // Ex√©cution en PROD
    if (environment === 'PROD' || environment === 'BOTH') {
      console.log('üî¥ Ex√©cution en PROD...');

      // V√©rifier si DEV a r√©ussi (si BOTH)
      if (environment === 'BOTH' && !results.dev?.success) {
        console.log('‚ö†Ô∏è Annulation PROD car DEV a √©chou√©');
        return NextResponse.json({
          success: false,
          error: 'Ex√©cution PROD annul√©e car DEV a √©chou√©',
          results
        });
      }

      try {
        // Connexion √† la base PROD - Configuration corrig√©e
        const supabaseUrlProd = process.env.NEXT_PUBLIC_SUPABASE_URL_PROD!;
        const supabaseKeyProd = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY_PROD!;
        const supabaseProd = createClient(supabaseUrlProd, supabaseKeyProd);

        // Ex√©cution r√©elle du SQL en PROD
        const { data: execResult, error: execError } = await supabaseProd.rpc('execute_sql', {
          sql_query: script.script_sql
        });

        if (execError) {
          throw new Error(`Erreur ex√©cution PROD: ${execError.message}`);
        }

        console.log('‚úÖ SQL ex√©cut√© en PROD:', execResult);

        // Mise √† jour du statut
        await supabaseDev
          .from('menu_ai_scripts')
          .update({
            prod_status: 'executed',
            prod_executed_at: TimezoneService.getCurrentTimeForDB()
          })
          .eq('id', scriptId);

        results.prod = { success: true, message: 'Script marqu√© comme ex√©cut√© en PROD' };
        console.log('‚úÖ Ex√©cution PROD r√©ussie');

      } catch (prodError: any) {
        console.error('‚ùå Erreur ex√©cution PROD:', prodError);

        await supabaseDev
          .from('menu_ai_scripts')
          .update({
            prod_status: 'error',
            prod_error_message: prodError.message || 'Erreur inconnue'
          })
          .eq('id', scriptId);

        results.prod = { success: false, error: prodError.message };
      }
    }

    // D√©terminer le succ√®s global
    const overallSuccess =
      (environment === 'DEV' && results.dev?.success) ||
      (environment === 'PROD' && results.prod?.success) ||
      (environment === 'BOTH' && results.dev?.success && results.prod?.success);

    return NextResponse.json({
      success: overallSuccess,
      environment,
      results,
      message: `Script ex√©cut√© sur ${environment}`
    });

  } catch (error) {
    console.error('‚ùå Erreur API execute-script:', error);
    return NextResponse.json({
      success: false,
      error: `Erreur serveur: ${error instanceof Error ? error.message : 'Erreur inconnue'}`
    });
  }
}