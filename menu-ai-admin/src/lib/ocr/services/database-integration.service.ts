// Service d'int√©gration base de donn√©es pour √âTAPE 3 : Database Integration
import { OCRSmartConfigure, ProductAnalysisResult } from '../interfaces/ocr-smart-configure.interface';
import { WorkflowGeneratorV2, UniversalWorkflow } from '@/lib/workflow-generator-v2';

export interface DatabaseIntegrationResult {
  success: boolean;
  restaurantId?: number;
  categoriesCreated?: number;
  productsCreated?: number;
  sql?: string;
  simulation?: string;
  error?: string;
  warnings?: string[];
}

export class DatabaseIntegrationService {

  /**
   * Int√®gre compl√®tement la configuration Smart OCR en base de donn√©es
   */
  static async integrateSmartConfiguration(
    smartConfig: OCRSmartConfigure,
    analysisResults: ProductAnalysisResult[]
  ): Promise<DatabaseIntegrationResult> {

    try {
      // 1. Cr√©er le restaurant
      const restaurantSQL = this.generateRestaurantSQL(smartConfig);

      // 2. Cr√©er les cat√©gories (22 cat√©gories Pizza Yolo 77)
      const categoriesSQL = this.generateCategoriesSQL(smartConfig);

      // 3. Cr√©er tous les produits avec workflows
      const productsSQL = await this.generateProductsSQL(smartConfig, analysisResults);

      // 4. SQL complet transactionnel
      const completeSQL = this.wrapInTransaction([
        restaurantSQL,
        categoriesSQL,
        productsSQL
      ]);

      // 5. Simulation bot pour tous les produits
      const simulation = this.generateBotSimulation(analysisResults);

      return {
        success: true,
        restaurantId: 999, // ID temporaire pour preview
        categoriesCreated: smartConfig.restaurantTemplate.categories.length,
        productsCreated: smartConfig.extractedProducts.length,
        sql: completeSQL,
        simulation,
        warnings: this.generateWarnings(analysisResults)
      };

    } catch (error) {
      console.error('Erreur int√©gration database:', error);
      return {
        success: false,
        error: `Erreur lors de l'int√©gration : ${error}`
      };
    }
  }

  /**
   * G√©n√®re le SQL pour cr√©er le restaurant
   */
  private static generateRestaurantSQL(smartConfig: OCRSmartConfigure): string {
    const { newRestaurantData, restaurantTemplate } = smartConfig;
    const config = restaurantTemplate.baseConfig;

    return `
-- ========================================
-- üè™ CR√âATION RESTAURANT : ${newRestaurantData.name.toUpperCase()}
-- ========================================

INSERT INTO france_restaurants (
  name, slug, whatsapp_number,
  address, city, phone,
  delivery_zone_km, min_order_amount, delivery_fee,
  business_hours, is_active
) VALUES (
  '${newRestaurantData.name}',
  '${newRestaurantData.slug}',
  '${newRestaurantData.whatsapp_number}',
  ${newRestaurantData.address ? `'${newRestaurantData.address}'` : 'NULL'},
  ${newRestaurantData.city ? `'${newRestaurantData.city}'` : 'NULL'},
  ${newRestaurantData.phone ? `'${newRestaurantData.phone}'` : 'NULL'},
  ${config.delivery_zone_km},
  ${config.min_order_amount},
  ${config.delivery_fee},
  '${JSON.stringify(config.business_hours)}'::jsonb,
  true
);

-- R√©cup√©rer l'ID du restaurant cr√©√©
SELECT currval('france_restaurants_id_seq') as new_restaurant_id;
    `.trim();
  }

  /**
   * G√©n√®re le SQL pour cr√©er les 22 cat√©gories
   */
  private static generateCategoriesSQL(smartConfig: OCRSmartConfigure): string {
    const categories = smartConfig.restaurantTemplate.categories;

    let sql = `
-- ========================================
-- üìÇ CR√âATION 22 CAT√âGORIES (TEMPLATE PIZZA YOLO 77)
-- ========================================

INSERT INTO france_menu_categories (
  restaurant_id, name, slug, icon, display_order, is_active
) VALUES`;

    const values = categories.map(cat =>
      `  (currval('france_restaurants_id_seq'), '${cat.name}', '${cat.slug}', '${cat.icon}', ${cat.display_order}, true)`
    );

    sql += '\n' + values.join(',\n') + ';';

    return sql;
  }

  /**
   * G√©n√®re le SQL pour cr√©er tous les produits avec workflows
   */
  private static async generateProductsSQL(
    smartConfig: OCRSmartConfigure,
    analysisResults: ProductAnalysisResult[]
  ): Promise<string> {

    let sql = `
-- ========================================
-- üçΩÔ∏è CR√âATION PRODUITS AVEC WORKFLOWS IA
-- ========================================
`;

    for (let i = 0; i < analysisResults.length; i++) {
      const result = analysisResults[i];
      const product = result.product;
      const categoryMapping = result.categoryMapping;
      const workflowSuggestion = result.workflowSuggestion;

      // Trouver la cat√©gorie correspondante
      const category = smartConfig.restaurantTemplate.categories.find(
        c => c.id === categoryMapping.suggestedCategoryId
      );

      if (!category) {
        console.warn(`Cat√©gorie non trouv√©e pour ${product.name}`);
        continue;
      }

      // Cr√©er workflow universel pour WorkflowGeneratorV2
      const workflow: UniversalWorkflow = {
        productName: product.name,
        restaurantId: 999, // Sera remplac√© par currval dans le SQL
        categoryName: category.name,
        onSitePrice: result.pricingSuggestion.onSitePrice,
        deliveryPrice: result.pricingSuggestion.deliveryPrice,
        steps: workflowSuggestion.steps,
        optionGroups: workflowSuggestion.optionGroups
      };

      // Utiliser WorkflowGeneratorV2 existant
      let productSQL = WorkflowGeneratorV2.generateCompleteSQL(workflow);

      // Remplacer l'ID restaurant par la r√©f√©rence currval
      productSQL = productSQL.replace(
        /restaurant_id = \d+/g,
        'restaurant_id = currval(\'france_restaurants_id_seq\')'
      );

      // Remplacer l'ID cat√©gorie par une sous-requ√™te
      productSQL = productSQL.replace(
        /category_id = \d+/g,
        `category_id = (SELECT id FROM france_menu_categories WHERE restaurant_id = currval('france_restaurants_id_seq') AND name = '${category.name}')`
      );

      sql += `
-- Produit ${i + 1}: ${product.name} (${result.detectedType})
-- Cat√©gorie: ${category.icon} ${category.name}
-- Workflow: ${workflowSuggestion.steps.length} √©tapes
${productSQL}
`;
    }

    return sql;
  }

  /**
   * Encapsule dans une transaction s√©curis√©e
   */
  private static wrapInTransaction(sqlParts: string[]): string {
    return `
BEGIN;

${sqlParts.join('\n\n')}

-- ========================================
-- ‚úÖ V√âRIFICATIONS FINALES
-- ========================================

-- V√©rifier restaurant cr√©√©
SELECT
  id, name, slug, whatsapp_number
FROM france_restaurants
WHERE id = currval('france_restaurants_id_seq');

-- V√©rifier cat√©gories cr√©√©es
SELECT COUNT(*) as categories_created
FROM france_menu_categories
WHERE restaurant_id = currval('france_restaurants_id_seq');

-- V√©rifier produits cr√©√©s
SELECT COUNT(*) as products_created
FROM france_products
WHERE restaurant_id = currval('france_restaurants_id_seq');

-- Si tout est OK, valider la transaction
COMMIT;

-- En cas de probl√®me, utiliser : ROLLBACK;
    `.trim();
  }

  /**
   * G√©n√®re la simulation bot pour tous les produits
   */
  private static generateBotSimulation(analysisResults: ProductAnalysisResult[]): string {
    let simulation = `
ü§ñ SIMULATION BOT WHATSAPP - NOUVEAU RESTAURANT
===============================================

1Ô∏è‚É£ COMMANDE "resto"
Bot: üè™ Restaurants disponibles :
     1. ${analysisResults[0]?.product.name || 'Nouveau Restaurant'} - üìç Adresse

2Ô∏è‚É£ S√âLECTION "1"
Bot: üìã Menu ${analysisResults[0]?.product.name || 'Nouveau Restaurant'} :

`;

    // Grouper par cat√©gories
    const byCategory = analysisResults.reduce((acc, result) => {
      const catName = result.categoryMapping.suggestedCategoryName;
      if (!acc[catName]) acc[catName] = [];
      acc[catName].push(result);
      return acc;
    }, {} as Record<string, ProductAnalysisResult[]>);

    let productIndex = 1;
    for (const [categoryName, products] of Object.entries(byCategory)) {
      const icon = products[0].categoryMapping.icon;
      simulation += `     ${icon} ${categoryName.toUpperCase()}\n`;

      for (const result of products) {
        simulation += `     ${productIndex}. ${result.product.name} - ${result.pricingSuggestion.onSitePrice}‚Ç¨\n`;
        productIndex++;
      }
      simulation += '\n';
    }

    // Exemple de commande avec workflow
    const firstModular = analysisResults.find(r => r.workflowSuggestion.steps.length > 0);
    if (firstModular) {
      simulation += `3Ô∏è‚É£ S√âLECTION "${productIndex - analysisResults.length}" (${firstModular.product.name})
`;

      firstModular.workflowSuggestion.steps.forEach((step, i) => {
        simulation += `Bot: ${step.prompt}
${Object.entries(firstModular.workflowSuggestion.optionGroups[step.option_groups[0]] || {}).slice(0, 3).map((option, j) =>
  `     ${j + 1}. ${option[1]?.name || 'Option'} ${option[1]?.price_modifier ? `(+${option[1].price_modifier}‚Ç¨)` : ''}`
).join('\n')}

`;
      });
    }

    simulation += `4Ô∏è‚É£ FINALISATION
Bot: üìã R√©capitulatif commande :
     ‚Ä¢ ${firstModular?.product.name || 'Produit'} - ${firstModular?.pricingSuggestion.deliveryPrice || 0}‚Ç¨

     üí∞ Total : ${firstModular?.pricingSuggestion.deliveryPrice || 0}‚Ç¨

     Mode de service :
     1Ô∏è‚É£ Sur place
     2Ô∏è‚É£ √Ä emporter
     3Ô∏è‚É£ Livraison (+2.50‚Ç¨)
`;

    return simulation;
  }

  /**
   * G√©n√®re les avertissements pour l'utilisateur
   */
  private static generateWarnings(analysisResults: ProductAnalysisResult[]): string[] {
    const warnings: string[] = [];

    // V√©rifier la confiance des analyses
    const lowConfidenceProducts = analysisResults.filter(r =>
      r.workflowSuggestion.confidence < 0.7 || r.categoryMapping.confidence < 0.7
    );

    if (lowConfidenceProducts.length > 0) {
      warnings.push(
        `${lowConfidenceProducts.length} produits ont une confiance d'analyse < 70%. V√©rifiez les workflows sugg√©r√©s.`
      );
    }

    // V√©rifier les prix manquants
    const noPriceProducts = analysisResults.filter(r =>
      r.pricingSuggestion.onSitePrice === 0
    );

    if (noPriceProducts.length > 0) {
      warnings.push(
        `${noPriceProducts.length} produits n'ont pas de prix d√©tect√©. V√©rifiez les prix avant le d√©ploiement.`
      );
    }

    // V√©rifier les cat√©gories par d√©faut
    const defaultCategoryProducts = analysisResults.filter(r =>
      r.categoryMapping.suggestedCategoryName === 'GOURMETS' && r.categoryMapping.confidence < 0.5
    );

    if (defaultCategoryProducts.length > 0) {
      warnings.push(
        `${defaultCategoryProducts.length} produits sont class√©s en cat√©gorie par d√©faut (GOURMETS). V√©rifiez le mapping.`
      );
    }

    return warnings;
  }

  /**
   * Valide la configuration avant int√©gration
   */
  static validateConfiguration(
    smartConfig: OCRSmartConfigure,
    analysisResults: ProductAnalysisResult[]
  ): { valid: boolean; errors: string[] } {
    const errors: string[] = [];

    // V√©rifier donn√©es restaurant
    if (!smartConfig.newRestaurantData.name) {
      errors.push('Nom du restaurant requis');
    }

    if (!smartConfig.newRestaurantData.whatsapp_number) {
      errors.push('Num√©ro WhatsApp requis');
    }

    // V√©rifier qu'on a des produits
    if (smartConfig.extractedProducts.length === 0) {
      errors.push('Aucun produit extrait');
    }

    if (analysisResults.length === 0) {
      errors.push('Aucune analyse de produit');
    }

    // V√©rifier correspondance
    if (smartConfig.extractedProducts.length !== analysisResults.length) {
      errors.push('Incoh√©rence entre produits extraits et analyses');
    }

    return {
      valid: errors.length === 0,
      errors
    };
  }
}