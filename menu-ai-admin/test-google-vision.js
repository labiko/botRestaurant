// test-google-vision.js - Script de test rapide pour Google Vision
const fs = require('fs');
const { ImageAnnotatorClient } = require('@google-cloud/vision');

async function testGoogleVision() {
  console.log('üöÄ Test Google Vision OCR...\n');

  try {
    // Configuration
    const client = new ImageAnnotatorClient({
      projectId: 'menu-audit-ocr',
      keyFilename: './config/google-service-account.json'
    });

    console.log('‚úÖ Client Google Vision initialis√©');

    // Charger l'image de test
    const imagePath = 'C:\\Users\\diall\\Documents\\BOT-RESTO\\BOT-UNIVERSEL\\IMAGES\\pn1.png';

    if (!fs.existsSync(imagePath)) {
      console.log('‚ùå Image de test introuvable:', imagePath);
      return;
    }

    console.log('üì∏ Image charg√©e:', imagePath);

    // Test de d√©tection de texte
    const startTime = Date.now();
    const [result] = await client.textDetection(imagePath);
    const processingTime = Date.now() - startTime;

    console.log('‚è±Ô∏è Temps de traitement:', processingTime + 'ms');

    if (!result.textAnnotations || result.textAnnotations.length === 0) {
      console.log('‚ùå Aucun texte d√©tect√©');
      return;
    }

    // Afficher le texte complet d√©tect√©
    const fullText = result.textAnnotations[0].description;
    console.log('üìù TEXTE COMPLET D√âTECT√â:');
    console.log('=' + '='.repeat(50));
    console.log(fullText);
    console.log('=' + '='.repeat(50));

    // Analyser la structure
    const lines = fullText.split('\n').filter(line => line.trim());
    console.log(`\nüìä ANALYSE: ${lines.length} lignes d√©tect√©es`);

    // D√©tecter les produits potentiels
    let productCount = 0;
    let priceCount = 0;

    lines.forEach((line, index) => {
      const trimmedLine = line.trim();

      // D√©tecter les noms de produits (majuscules, patterns sp√©cifiques)
      if (/^[A-Z][A-Z\s\d]+$/.test(trimmedLine) ||
          /^(LE|LA|LES)\s+[A-Z]/.test(trimmedLine) ||
          /^\d+$/.test(trimmedLine) ||
          /BURGER|CHEESE|BACON|FISH|CHICKEN/.test(trimmedLine)) {
        console.log(`üçî Produit potentiel [${index}]: "${trimmedLine}"`);
        productCount++;
      }

      // D√©tecter les prix
      if (/\d+[,.]?\d*\s*[‚Ç¨EUR]|\d+[,.]?\d*\s*euro/i.test(trimmedLine)) {
        console.log(`üí∞ Prix d√©tect√© [${index}]: "${trimmedLine}"`);
        priceCount++;
      }
    });

    console.log(`\nüìà R√âSUM√â:`);
    console.log(`   - Lignes totales: ${lines.length}`);
    console.log(`   - Produits potentiels: ${productCount}`);
    console.log(`   - Prix d√©tect√©s: ${priceCount}`);
    console.log(`   - Temps de traitement: ${processingTime}ms`);
    console.log(`   - Co√ªt estim√©: ~0.15 centime`);

    console.log('\n‚úÖ Test Google Vision r√©ussi !');

  } catch (error) {
    console.log('\n‚ùå ERREUR lors du test:', error.message);

    if (error.code === 'ENOENT') {
      console.log('üí° V√©rifiez que le fichier de cl√© existe:');
      console.log('   ./config/google-service-account.json');
    }

    if (error.message.includes('UNAUTHENTICATED')) {
      console.log('üí° Probl√®me d\'authentification:');
      console.log('   - V√©rifiez le fichier de cl√© JSON');
      console.log('   - V√©rifiez le project ID');
    }

    if (error.message.includes('PERMISSION_DENIED')) {
      console.log('üí° Permissions insuffisantes:');
      console.log('   - V√©rifiez que Vision API est activ√©e');
      console.log('   - V√©rifiez les r√¥les du service account');
    }
  }
}

// Lancer le test
testGoogleVision();